"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[367],{2683:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var t=r(5893),o=r(1151);const i={sidebar_position:60},s="Error handling",d={id:"errors",title:"Error handling",description:"When catching errors thrown by the library, it's strongly recommended not to immediately present them using the Alert module. This is because on Android, when transitioning from the Google Sign-In flow to your app, the current Activity may be null which would cause the alert call to be a noop. You can work around this by presenting the alert after a delay, or handling the error differently.",source:"@site/docs/errors.md",sourceDirName:".",slug:"/errors",permalink:"/docs/errors",draft:!1,unlisted:!1,editUrl:"https://github.com/react-native-google-signin/docs/edit/main/docs/errors.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{sidebar_position:60},sidebar:"tutorialSidebar",previous:{title:"Jest module mock",permalink:"/docs/jest-mock"},next:{title:"Troubleshooting",permalink:"/docs/troubleshooting"}},c={},l=[{value:"<code>isErrorWithCode(value)</code>",id:"iserrorwithcodevalue",level:3},{value:"Status Codes",id:"status-codes",level:3},{value:"Status codes specific to One-tap sign in",id:"status-codes-specific-to-one-tap-sign-in",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"error-handling",children:"Error handling"})}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"catch"}),"ing errors thrown by the library, it's strongly recommended not to immediately present them using the ",(0,t.jsxs)(n.a,{href:"https://reactnative.dev/docs/alert",children:[(0,t.jsx)(n.code,{children:"Alert"})," module"]}),". This is because on Android, when transitioning from the Google Sign-In flow to your app, the current ",(0,t.jsx)(n.a,{href:"https://developer.android.com/reference/android/app/Activity",children:"Activity"})," may be ",(0,t.jsx)(n.code,{children:"null"})," which would cause the alert call to be a noop. You can work around this by presenting the alert after a delay, or handling the error differently."]}),"\n",(0,t.jsx)(n.h3,{id:"iserrorwithcodevalue",children:(0,t.jsx)(n.code,{children:"isErrorWithCode(value)"})}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript helper to check if the passed parameter is an instance of ",(0,t.jsx)(n.code,{children:"Error"})," which has the ",(0,t.jsx)(n.code,{children:"code"})," property. All errors thrown by this library have the ",(0,t.jsx)(n.code,{children:"code"})," property, which contains a value from ",(0,t.jsx)(n.a,{href:"#status-codes",children:(0,t.jsx)(n.code,{children:"statusCodes"})})," or some other string for the less-usual errors."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"isErrorWithCode"})," can be used to avoid ",(0,t.jsx)(n.code,{children:"as"})," casting when you want to access the ",(0,t.jsx)(n.code,{children:"code"})," property on errors returned by the module."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import {\n  isErrorWithCode,\n  GoogleSignin,\n} from '@react-native-google-signin/google-signin';\n\ntry {\n  const userInfo = await GoogleSignin.signIn();\n  // do something with userInfo\n} catch (error) {\n  if (isErrorWithCode(error)) {\n    // here you can safely read `error.code` and TypeScript will know that it has a value\n  } else {\n    // this error does not have a `code`, and does not come from the Google Sign in module\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"status-codes",children:"Status Codes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { statusCodes } from '@react-native-google-signin/google-signin';\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Status codes are useful when determining which kind of error has occurred during the sign-in process. Under the hood, these constants are derived from native GoogleSignIn error codes and are platform-specific. Always compare ",(0,t.jsx)(n.code,{children:"error.code"})," to ",(0,t.jsx)(n.code,{children:"statusCodes.*"})," and do not rely on the raw value of ",(0,t.jsx)(n.code,{children:"error.code"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"original#signin",children:"example usage"}),"."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"IN_PROGRESS"})}),(0,t.jsxs)(n.td,{children:["Trying to invoke another operation (e.g. ",(0,t.jsx)(n.code,{children:"signInSilently"}),") when previous one has not yet finished. If you call e.g. ",(0,t.jsx)(n.code,{children:"signInSilently"})," twice, two calls to ",(0,t.jsx)(n.code,{children:"signInSilently"})," in the native module will be done. The promise from the first call to ",(0,t.jsx)(n.code,{children:"signInSilently"})," will be rejected with this error, and the second will resolve / reject with the result of the native call."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"PLAY_SERVICES_NOT_AVAILABLE"})}),(0,t.jsxs)(n.td,{children:["Play services are not available or outdated. This happens on Android, or on the Web when you're calling the exposed APIs ",(0,t.jsx)(n.a,{href:"setting-up/web",children:"before the Client library is loaded"}),"."]})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"status-codes-specific-to-one-tap-sign-in",children:"Status codes specific to One-tap sign in"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ONE_TAP_START_FAILED"})}),(0,t.jsxs)(n.td,{children:["Thrown only on Android when the One-tap sign in UI cannot be presented. This happens during the ",(0,t.jsx)(n.a,{href:"https://developers.google.com/identity/gsi/web/guides/features#exponential_cooldown",children:"cooldown period"}),". You can still call ",(0,t.jsx)(n.code,{children:"presentExplicitSignIn"})," in that case."]})]})})]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"one-tap#signin",children:"example usage"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>s});var t=r(7294);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);