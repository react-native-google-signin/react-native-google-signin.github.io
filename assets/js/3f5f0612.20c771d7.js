"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[419],{6433:(e,n,s)=>{s.d(n,{ZP:()=>l,d$:()=>r});var i=s(5893),o=s(1151);const r=[{value:"Utility Functions",id:"utility-functions",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"There are 4 helper functions available:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"errors#iserrorwithcodevalue",children:(0,i.jsx)(n.code,{children:"isErrorWithCode"})})," for processing errors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"api#issuccessresponse",children:(0,i.jsx)(n.code,{children:"isSuccessResponse"})})," for checking if a response represents a successful operation. Same as checking ",(0,i.jsx)(n.code,{children:"response.type === 'success'"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"api#isnosavedcredentialfoundresponse",children:(0,i.jsx)(n.code,{children:"isNoSavedCredentialFoundResponse"})})," for checking if a response represents no saved credentials case. Same as checking ",(0,i.jsx)(n.code,{children:"response.type === 'noSavedCredentialFound'"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"api#iscancelledresponse",children:(0,i.jsx)(n.code,{children:"isCancelledResponse"})})," for checking if a response represents user cancellation case. Same as checking ",(0,i.jsx)(n.code,{children:"response.type === 'cancelled'"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{})]})}function l(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1442:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>c,metadata:()=>t,toc:()=>d});var i=s(5893),o=s(1151),r=s(6433);const c={sidebar_position:40},l="Original Google sign in",t={id:"original",title:"Original Google sign in",description:"This module exposes",source:"@site/docs/original.mdx",sourceDirName:".",slug:"/original",permalink:"/docs/original",draft:!1,unlisted:!1,editUrl:"https://github.com/react-native-google-signin/docs/edit/main/docs/original.mdx",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"tutorialSidebar",previous:{title:"One-tap Google sign in",permalink:"/docs/one-tap"},next:{title:"React components",permalink:"/docs/category/react-components"}},a={},d=[{value:"<code>configure</code>",id:"configure",level:3},{value:"<code>signIn</code>",id:"signin",level:3},...r.d$,{value:"<code>addScopes</code>",id:"addscopes",level:3},{value:"<code>signInSilently</code>",id:"signinsilently",level:3},{value:"<code>hasPreviousSignIn</code>",id:"hasprevioussignin",level:3},{value:"<code>getCurrentUser</code>",id:"getcurrentuser",level:3},{value:"<code>clearCachedAccessToken</code>",id:"clearcachedaccesstoken",level:3},{value:"<code>getTokens</code>",id:"gettokens",level:3},{value:"<code>signOut</code>",id:"signout",level:3},{value:"<code>revokeAccess</code>",id:"revokeaccess",level:3},{value:"<code>hasPlayServices</code>",id:"hasplayservices",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"original-google-sign-in",children:"Original Google sign in"})}),"\n",(0,i.jsx)(n.p,{children:"This module exposes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://web.archive.org/web/20240308064911/https://developers.google.com/identity/sign-in/android/start-integrating",children:"Google Sign-In for Android (legacy)"}),". The underlying SDK is deprecated but functional."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://developers.google.com/identity/sign-in/ios/start",children:"Google Sign-In SDK"})," for iOS and macOS (macOS support is only available to ",(0,i.jsx)(n.a,{href:"install#sponsor-only-version",children:"sponsors"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="imports example"',children:"import {\n  GoogleSignin,\n  GoogleSigninButton,\n  statusCodes,\n} from '@react-native-google-signin/google-signin';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configure",children:(0,i.jsx)(n.code,{children:"configure"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: (",(0,i.jsx)(n.code,{children:"options"}),": ",(0,i.jsx)(n.a,{href:"api#configureparams",children:(0,i.jsx)(n.code,{children:"ConfigureParams"})}),") => ",(0,i.jsx)(n.code,{children:"void"})]}),"\n",(0,i.jsxs)(n.p,{children:["It is mandatory to call this method before attempting to call ",(0,i.jsx)(n.code,{children:"signIn()"})," and ",(0,i.jsx)(n.code,{children:"signInSilently()"}),". This method is synchronous, meaning you can call ",(0,i.jsx)(n.code,{children:"signIn"})," / ",(0,i.jsx)(n.code,{children:"signInSilently"})," right after it. Typically, you would call ",(0,i.jsx)(n.code,{children:"configure"})," only once, soon after your app starts. All parameters are optional."]}),"\n",(0,i.jsx)(n.p,{children:"Example usage with default options: you'll get user email and basic profile info."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { GoogleSignin } from '@react-native-google-signin/google-signin';\n\nGoogleSignin.configure();\n"})}),"\n",(0,i.jsx)(n.p,{children:"An example with all options enumerated:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"GoogleSignin.configure({\n  webClientId: '<FROM DEVELOPER CONSOLE>', // client ID of type WEB for your server. Required to get the `idToken` on the user object, and for offline access.\n  scopes: ['https://www.googleapis.com/auth/drive.readonly'], // what API you want to access on behalf of the user, default is email and profile\n  offlineAccess: true, // if you want to access Google API on behalf of the user FROM YOUR SERVER\n  hostedDomain: '', // specifies a hosted domain restriction\n  forceCodeForRefreshToken: true, // [Android] related to `serverAuthCode`, read the docs link below *.\n  accountName: '', // [Android] specifies an account name on the device that should be used\n  iosClientId: '<FROM DEVELOPER CONSOLE>', // [iOS] if you want to specify the client ID of type iOS (otherwise, it is taken from GoogleService-Info.plist)\n  googleServicePlistPath: '', // [iOS] if you renamed your GoogleService-Info file, new name here, e.g. \"GoogleService-Info-Staging\"\n  openIdRealm: '', // [iOS] The OpenID2 realm of the home web server. This allows Google to include the user's OpenID Identifier in the OpenID Connect ID token.\n  profileImageSize: 120, // [iOS] The desired height (and width) of the profile image. Defaults to 120px\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["* ",(0,i.jsx)(n.a,{href:"https://developers.google.com/android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions.Builder#public-googlesigninoptions.builder-requestserverauthcode-string-serverclientid,-boolean-forcecodeforrefreshtoken",children:"forceCodeForRefreshToken docs"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"signin",children:(0,i.jsx)(n.code,{children:"signIn"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: (",(0,i.jsx)(n.code,{children:"options"}),": ",(0,i.jsx)(n.a,{href:"api#signinparams",children:(0,i.jsx)(n.code,{children:"SignInParams"})}),") => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.a,{href:"api#signinresponse",children:(0,i.jsx)(n.code,{children:"SignInResponse"})}),">"]}),"\n",(0,i.jsxs)(n.p,{children:["Prompts a modal to let the user sign in into your application. Resolved promise returns an ",(0,i.jsxs)(n.a,{href:"api#signinresponse",children:[(0,i.jsx)(n.code,{children:"SignInResponse"})," object"]}),". Rejects with an error otherwise."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="signIn example" showLineNumbers',children:"// import statusCodes along with GoogleSignin\nimport {\n  GoogleSignin,\n  statusCodes,\n} from '@react-native-google-signin/google-signin';\n\n// Somewhere in your code\nconst signIn = async () => {\n  try {\n    await GoogleSignin.hasPlayServices();\n    const response = await GoogleSignin.signIn();\n    if (isSuccessResponse(response)) {\n      setState({ userInfo: response.data });\n    } else {\n      // sign in was cancelled by user\n    }\n  } catch (error) {\n    if (isErrorWithCode(error)) {\n      switch (error.code) {\n        case statusCodes.IN_PROGRESS:\n          // operation (eg. sign in) already in progress\n          break;\n        case statusCodes.PLAY_SERVICES_NOT_AVAILABLE:\n          // Android only, play services not available or outdated\n          break;\n        default:\n        // some other error happened\n      }\n    } else {\n      // an error that's not related to google sign in occurred\n    }\n  }\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n","\n",(0,i.jsx)(r.ZP,{}),"\n",(0,i.jsx)(n.h3,{id:"addscopes",children:(0,i.jsx)(n.code,{children:"addScopes"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: (",(0,i.jsx)(n.code,{children:"options"}),": ",(0,i.jsx)(n.a,{href:"api#addscopesparams",children:(0,i.jsx)(n.code,{children:"AddScopesParams"})}),") => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.a,{href:"api#signinresponse",children:(0,i.jsx)(n.code,{children:"SignInResponse"})})," | ",(0,i.jsx)(n.code,{children:"null"}),">"]}),"\n",(0,i.jsxs)(n.p,{children:["This method resolves with ",(0,i.jsx)(n.code,{children:"SignInResponse"})," object or with ",(0,i.jsx)(n.code,{children:"null"})," if no user is currently logged in."]}),"\n",(0,i.jsxs)(n.p,{children:["You may not need this call: you can supply required scopes to the ",(0,i.jsx)(n.code,{children:"configure"})," call. However, if you want to gain access to more scopes later, use this call."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const response = await GoogleSignin.addScopes({\n  scopes: ['https://www.googleapis.com/auth/user.gender.read'],\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"signinsilently",children:(0,i.jsx)(n.code,{children:"signInSilently"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: () => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.a,{href:"api#signinsilentlyresponse",children:(0,i.jsx)(n.code,{children:"SignInSilentlyResponse"})}),">"]}),"\n",(0,i.jsxs)(n.p,{children:["May be called e.g. after of your main component mounts. This method returns a ",(0,i.jsx)(n.code,{children:"Promise"})," that resolves with the ",(0,i.jsx)(n.code,{children:"SignInSilentlyResponse"})," object and rejects with an error otherwise."]}),"\n",(0,i.jsxs)(n.p,{children:["To see how to handle errors read ",(0,i.jsxs)(n.a,{href:"#signin",children:[(0,i.jsx)(n.code,{children:"signIn()"})," method"]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const getCurrentUser = async () => {\n  try {\n    const response = await GoogleSignin.signInSilently();\n    if (isSuccessResponse(response)) {\n      setState({ userInfo: response.data });\n    } else if (isNoSavedCredentialFoundResponse(response)) {\n      // user has not signed in yet\n    }\n  } catch (error) {\n    // handle errror\n  }\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hasprevioussignin",children:(0,i.jsx)(n.code,{children:"hasPreviousSignIn"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: () => ",(0,i.jsx)(n.code,{children:"boolean"})]}),"\n",(0,i.jsx)(n.p,{children:"This synchronous method may be used to find out whether some user previously signed in."}),"\n",(0,i.jsxs)(n.p,{children:["Note that ",(0,i.jsx)(n.code,{children:"hasPreviousSignIn()"})," can return ",(0,i.jsx)(n.code,{children:"true"})," but ",(0,i.jsx)(n.code,{children:"getCurrentUser()"})," can return ",(0,i.jsx)(n.code,{children:"null"}),", in which case you can call ",(0,i.jsx)(n.code,{children:"signInSilently()"})," to recover the user.\nHowever, it may happen that calling ",(0,i.jsx)(n.code,{children:"signInSilently()"})," rejects with an error (e.g. due to a network issue)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const hasPreviousSignIn = async () => {\n  const hasPreviousSignIn = GoogleSignin.hasPreviousSignIn();\n  setState({ hasPreviousSignIn });\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"getcurrentuser",children:(0,i.jsx)(n.code,{children:"getCurrentUser"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: () => ",(0,i.jsx)(n.a,{href:"api#user",children:(0,i.jsx)(n.code,{children:"User"})})," | ",(0,i.jsx)(n.code,{children:"null"})]}),"\n",(0,i.jsxs)(n.p,{children:["This is a synchronous method that returns ",(0,i.jsx)(n.code,{children:"null"})," or ",(0,i.jsx)(n.code,{children:"User"})," object of the currently signed-in user."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const getCurrentUser = async () => {\n  const currentUser = GoogleSignin.getCurrentUser();\n  setState({ currentUser });\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"clearcachedaccesstoken",children:(0,i.jsx)(n.code,{children:"clearCachedAccessToken"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: (",(0,i.jsx)(n.code,{children:"accessTokenString"}),": ",(0,i.jsx)(n.code,{children:"string"}),") => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.code,{children:"null"}),">"]}),"\n",(0,i.jsxs)(n.p,{children:["This method only has an effect on Android. You may run into a ",(0,i.jsx)(n.code,{children:"401 Unauthorized"})," error when a token is invalid. Call this method to remove the token from local cache and then call ",(0,i.jsx)(n.code,{children:"getTokens()"})," to get fresh tokens. Calling this method on iOS does nothing and always resolves. This is because on iOS, ",(0,i.jsx)(n.code,{children:"getTokens()"})," always returns valid tokens, refreshing them first if they have expired or are about to expire (see ",(0,i.jsx)(n.a,{href:"https://developers.google.com/identity/sign-in/ios/reference/Classes/GIDGoogleUser#-refreshtokensifneededwithcompletion:",children:"docs"}),")."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"gettokens",children:(0,i.jsx)(n.code,{children:"getTokens"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: () => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.a,{href:"api#gettokensresponse",children:(0,i.jsx)(n.code,{children:"GetTokensResponse"})}),">"]}),"\n",(0,i.jsxs)(n.p,{children:["Resolves with an object containing ",(0,i.jsx)(n.code,{children:"{ idToken: string, accessToken: string, }"})," or rejects with an error. Note that using ",(0,i.jsx)(n.code,{children:"accessToken"})," for identity assertion on your backend server is ",(0,i.jsx)(n.a,{href:"https://developers.google.com/identity/sign-in/android/migration-guide",children:"discouraged"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"signout",children:(0,i.jsx)(n.code,{children:"signOut"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: () => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.code,{children:"null"}),">"]}),"\n",(0,i.jsx)(n.p,{children:"Signs out the current user."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const signOut = async () => {\n  try {\n    await GoogleSignin.signOut();\n    setState({ user: null }); // Remember to remove the user from your app's state as well\n  } catch (error) {\n    console.error(error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"revokeaccess",children:(0,i.jsx)(n.code,{children:"revokeAccess"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: () => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.code,{children:"null"}),">"]}),"\n",(0,i.jsxs)(n.p,{children:["Removes your application from the user authorized applications. Read more about it ",(0,i.jsx)(n.a,{href:"https://developers.google.com/identity/sign-in/ios/disconnect#objective-c",children:"here"})," and ",(0,i.jsx)(n.a,{href:"https://developers.google.com/android/reference/com/google/android/gms/auth/api/signin/GoogleSignInClient#revokeAccess()",children:"here"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const revokeAccess = async () => {\n  try {\n    await GoogleSignin.revokeAccess();\n    // Google Account disconnected from your app.\n    // Perform clean-up actions, such as deleting data associated with the disconnected account.\n  } catch (error) {\n    console.error(error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hasplayservices",children:(0,i.jsx)(n.code,{children:"hasPlayServices"})}),"\n",(0,i.jsxs)(n.p,{children:["signature: (",(0,i.jsx)(n.code,{children:"options"}),": ",(0,i.jsx)(n.a,{href:"api#hasplayservicesparams",children:(0,i.jsx)(n.code,{children:"HasPlayServicesParams"})}),") => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.code,{children:"boolean"}),">"]}),"\n",(0,i.jsx)(n.p,{children:"Checks if device has Google Play Services installed. Always resolves to true on iOS."}),"\n",(0,i.jsxs)(n.p,{children:["Presence of up-to-date Google Play Services is required to show the sign in modal, but it is ",(0,i.jsx)(n.em,{children:"not"})," required to perform calls to ",(0,i.jsx)(n.code,{children:"configure"})," and ",(0,i.jsx)(n.code,{children:"signInSilently"}),". Therefore, we recommend to call ",(0,i.jsx)(n.code,{children:"hasPlayServices"})," directly before ",(0,i.jsx)(n.code,{children:"signIn"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"try {\n  await GoogleSignin.hasPlayServices({ showPlayServicesUpdateDialog: true });\n  // google services are available\n} catch (err) {\n  console.error('play services are not available');\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"hasPlayServices"})," accepts one parameter, an object which contains a single key: ",(0,i.jsx)(n.code,{children:"showPlayServicesUpdateDialog"})," (defaults to ",(0,i.jsx)(n.code,{children:"true"}),"). When ",(0,i.jsx)(n.code,{children:"showPlayServicesUpdateDialog"})," is set to true the library will prompt the user to take action to solve the issue, as seen in the figure below."]}),"\n",(0,i.jsx)(n.p,{children:"You may also use this call at any time to find out if Google Play Services are available and react to the result as necessary."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"prompt install",src:s(9534).Z+"",width:"614",height:"350"})})]})}function g(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},9534:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/prompt-install-b928a962a8d2c0a416628bffd0c95448.png"},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>c});var i=s(7294);const o={},r=i.createContext(o);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);