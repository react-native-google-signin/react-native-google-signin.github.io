{"searchDocs":[{"title":"WebGoogleSigninButton","type":0,"sectionRef":"#","url":"/docs/buttons/web","content":"","keywords":"","version":null},{"title":"How to use this​","type":1,"pageTitle":"WebGoogleSigninButton","url":"/docs/buttons/web#how-to-use-this","content":" As the One-tap Guide explains, there are two ways to sign in on the Web: using the One-tap UI or using the Google Sign-In button.  One-tap UI may not always be available: This happens if user has opted out or when they close the dialog several times in a row, entering the cooldown period.  The Google Sign-In button serves as a fallback. Tapping it will open the regular Google Sign-In dialog.  import { WebGoogleSigninButton } from '@react-native-google-signin/google-signin'; &lt;WebGoogleSigninButton /&gt;;   ","version":null,"tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"WebGoogleSigninButton","url":"/docs/buttons/web#props","content":" All props are optional.  Name\tType\tDescriptiontype?\t&quot;standard&quot; | &quot;icon&quot;\tThe type of the sign-in button. theme?\t&quot;outline&quot; | &quot;filled_blue&quot; | &quot;filled_black&quot;\tThe theme of the sign-in button. size?\t&quot;large&quot; | &quot;medium&quot; | &quot;small&quot;\tThe size of the sign-in button. text?\t&quot;signin_with&quot; | &quot;signup_with&quot; | &quot;continue_with&quot; | &quot;signin&quot;\tThe text to display on the sign-in button. shape?\t&quot;rectangular&quot; | &quot;pill&quot; | &quot;circle&quot; | &quot;square&quot;\tThe shape of the sign-in button. width?\tnumber\tThe width of the sign-in button. locale?\tstring\tThe locale for the sign-in button. logoAlignment?\t&quot;left&quot; | &quot;center&quot;\tThe alignment of the logo on the button. onError?\t(error: Error) =&gt; void\tCalled when you try to render the button before the Client SDK is loaded. ","version":null,"tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/install","content":"","keywords":"","version":null},{"title":"Sponsor-Only Version​","type":1,"pageTitle":"Installation","url":"/docs/install#sponsor-only-version","content":" Available exclusively to GitHub sponsors, this version offers:  ✅ One-tap sign-in support for Android and Web, with an API compatibility layer for iOS and macOS.  ✅ Automatic webClientId detection for Firebase.  ✅ Support for macOS (using react-native-macOS).  Your sponsorship enables continued maintenance and development of the module and contributions to upstream SDKs (such as 1, 2). Thank you for supporting this project! ❤️  ","version":null,"tagName":"h3"},{"title":"Public Version​","type":1,"pageTitle":"Installation","url":"/docs/install#public-version","content":" Available on the public npm registry, this version does not include One-tap sign-in (it uses the deprecated Google Sign-In for Android), Web and macOS support found in the sponsor-only version.  ","version":null,"tagName":"h3"},{"title":"Accessing the private package for sponsors​","type":1,"pageTitle":"Installation","url":"/docs/install#accessing-the-private-package-for-sponsors","content":" Upon sponsoring (please use specifically the tiers that mention this project!), you will get an invitation to access the private package and to the private repo with the sources and examples.  Three steps are needed to access the sponsor package, which is hosted on GitHub npm packages registry.  Become a sponsor and accept the private repository invitation - it takes just a few clicks. Obtain here a Personal Access Token with packages:read permission. Set up your package manager so that it fetches the package from the GH packages registry instead of the public registry. In this example, we're using an NPM_TOKEN_GOOGLE_SIGN_IN environment variable.    npm / yarn v1yarn v3+ create a .npmrc file in your project root with the following content: //npm.pkg.github.com/:_authToken=${NPM_TOKEN_GOOGLE_SIGN_IN} @react-native-google-signin:registry=https://npm.pkg.github.com/   If you use another package manager (such as bun), please refer to its documentation on how to set up a custom registry.  ","version":null,"tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"/docs/install#requirements","content":" The package requires React Native 0.60 or higher.  If you're using the New Architecture, you need to be on React Native 0.72 or higher but it's strongly recommended to use the latest version available.  ","version":null,"tagName":"h2"},{"title":"Installing​","type":1,"pageTitle":"Installation","url":"/docs/install#installing","content":" yarn add @react-native-google-signin/google-signin@latest   If you're a sponsor, open the npm lockfile (yarn.lock or package-lock.json) and verify that the package is fetched from the GitHub registry (the entry will point to npm.pkg.github.com, not registry.npmjs.org). If it's not, it means that your package manager is not configured correctly.  There are several guides to follow now:  Expo guide for native mobile apps built with ExpoWeb guide if you want to use the package on the WebIf you're not using Expo but plain React Native, follow Android guide and iOS guide ","version":null,"tagName":"h2"},{"title":"Error handling","type":0,"sectionRef":"#","url":"/docs/errors","content":"","keywords":"","version":null},{"title":"isErrorWithCode(value)​","type":1,"pageTitle":"Error handling","url":"/docs/errors#iserrorwithcodevalue","content":" TypeScript helper to check if the passed parameter is an instance of Error which has the code property. All errors thrown by this library have the code property, which contains a value from statusCodes or some other string for the less-usual errors.  isErrorWithCode can be used to avoid as casting when you want to access the code property on errors returned by the module.  import { isErrorWithCode, GoogleSignin, } from '@react-native-google-signin/google-signin'; try { const userInfo = await GoogleSignin.signIn(); // do something with userInfo } catch (error) { if (isErrorWithCode(error)) { // here you can safely read `error.code` and TypeScript will know that it has a value } else { // this error does not have a `code`, and does not come from the Google Sign in module } }   ","version":null,"tagName":"h3"},{"title":"Status Codes​","type":1,"pageTitle":"Error handling","url":"/docs/errors#status-codes","content":" import { statusCodes } from '@react-native-google-signin/google-signin';   Status codes are useful when determining which kind of error has occurred during the sign-in process. Under the hood, these constants are derived from native GoogleSignIn error codes and are platform-specific. Always compare error.code to statusCodes.* and do not rely on the raw value of error.code.  See example usage.  Name\tDescriptionIN_PROGRESS\tTrying to invoke another operation (e.g. signInSilently) when previous one has not yet finished. If you call e.g. signInSilently twice, two calls to signInSilently in the native module will be done. The promise from the first call to signInSilently will be rejected with this error, and the second will resolve / reject with the result of the native call. PLAY_SERVICES_NOT_AVAILABLE\tPlay services are not available or outdated. This happens on Android, or on the Web when you're calling the exposed APIs before the Client library is loaded.  ","version":null,"tagName":"h3"},{"title":"Status codes specific to One-tap sign in​","type":1,"pageTitle":"Error handling","url":"/docs/errors#status-codes-specific-to-one-tap-sign-in","content":" Name\tDescriptionONE_TAP_START_FAILED\tThrown only on Android when the One-tap sign in UI cannot be presented. This happens during the cooldown period. You can still call presentExplicitSignIn in that case.  See example usage. ","version":null,"tagName":"h3"},{"title":"GoogleSigninButton","type":0,"sectionRef":"#","url":"/docs/buttons/native","content":"","keywords":"","version":null},{"title":"Props​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#props","content":" ","version":null,"tagName":"h2"},{"title":"size​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#size","content":" Possible values:  Size.Icon: display only Google icon. Recommended size of 48 x 48.Size.Standard: icon with 'Sign in'. Recommended size of 230 x 48.Size.Wide: icon with 'Sign in with Google'. Recommended size of 312 x 48.  Default: GoogleSigninButton.Size.Standard. Given the size prop you pass, we'll automatically apply the recommended size, but you can override it by passing the style prop as in style={{ width, height }}.  ","version":null,"tagName":"h3"},{"title":"color​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#color","content":" Possible values:  Color.Dark: apply a blue backgroundColor.Light: apply a light gray background  ","version":null,"tagName":"h3"},{"title":"disabled​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#disabled","content":" Boolean. If true, all interactions for the button are disabled.  ","version":null,"tagName":"h3"},{"title":"onPress​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#onpress","content":" Handler to be called when the user taps the button  ","version":null,"tagName":"h3"},{"title":"Inherited View props...​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#inherited-view-props","content":"","version":null,"tagName":"h3"},{"title":"Jest module mock","type":0,"sectionRef":"#","url":"/docs/jest-mock","content":"Jest module mock If you use Jest for testing, you may need to mock the functionality of the native module. This library ships with a Jest mock that you can add to the setupFiles array in your Jest config. By default, the mock behaves as if the calls were successful and returns mock user data. jest.config.js|ts|mjs|cjs|json { &quot;setupFiles&quot;: [ &quot;./node_modules/@react-native-google-signin/google-signin/jest/build/jest/setup.js&quot; ] } ","keywords":"","version":null},{"title":"Integration Notes","type":0,"sectionRef":"#","url":"/docs/integration-notes","content":"","keywords":"","version":null},{"title":"Additional scopes​","type":1,"pageTitle":"Integration Notes","url":"/docs/integration-notes#additional-scopes","content":" The default requested scopes are email and profile.  If you want to manage other data from your application (for example access user agenda or upload a file to drive) you need to request additional permissions. This can be accomplished by adding the necessary scopes when configuring the GoogleSignin instance.  Please visit https://developers.google.com/identity/protocols/googlescopes or https://developers.google.com/oauthplayground/ for a list of available scopes. ","version":null,"tagName":"h2"},{"title":"API reference","type":0,"sectionRef":"#","url":"/docs/api","content":"","keywords":"","version":null},{"title":"One-tap sign in module​","type":1,"pageTitle":"API reference","url":"/docs/api#one-tap-sign-in-module","content":" ","version":null,"tagName":"h2"},{"title":"AuthorizationResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#authorizationresponse","content":" AuthorizationResponse: CancelledResponse | AuthorizationSuccessResponse  The response object of requestAuthorization. Either the user cancelled the flow or they successfully gave authorization.    ","version":null,"tagName":"h3"},{"title":"AuthorizationSuccessResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#authorizationsuccessresponse","content":" AuthorizationSuccessResponse: {data: {accessToken: string;grantedScopes: string[];serverAuthCode: string | null; };type: &quot;success&quot;; }  An object that contains an access token that has access to the grantedScopes. It contains also the serverAuthCode if offlineAccess was requested.  On iOS, you can also obtain serverAuthCode by calling createAccount() with offlineAccess: true.  Type declaration​  Name\tTypedata\t{accessToken: string;grantedScopes: string[];serverAuthCode: string | null; } data.accessToken\tstring data.grantedScopes\tstring[] data.serverAuthCode\tstring | null type\t&quot;success&quot;    ","version":null,"tagName":"h3"},{"title":"OneTapConfigureParams​","type":1,"pageTitle":"API reference","url":"/docs/api#onetapconfigureparams","content":" OneTapConfigureParams: ClientIdOrPlistPath &amp; {hostedDomain: string;logLevel: &quot;debug&quot; | &quot;info&quot; | &quot;warn&quot;;offlineAccess: boolean;openIdRealm: string;profileImageSize: number;scopes: string[];webClientId: WebClientId; }  webClientId is the most important parameter in the configuration. It is required.  Type declaration​  Name\tType\tDescriptionhostedDomain?\tstring\tiOS only. Specifies a hosted domain restriction. By setting this, authorization will be restricted to accounts of the user in the specified domain. logLevel?\t&quot;debug&quot; | &quot;info&quot; | &quot;warn&quot;\tWeb only. Controls debug logging in browser console. This is implemented in Google's web SDK and is not part of their public API so it may change or be removed at any time. offlineAccess?\tboolean\tiOS only. Use requestAuthorization on Android. Must be true if you wish to access user APIs on behalf of the user from your own server. When offline access is requested, an authorization code is returned so the server can use the authorization code to exchange for a refresh token. The refresh token allows the server to access Google data on behalf of the user. Default false openIdRealm?\tstring\tiOS only. The OpenID2 realm of the home web server. This allows Google to include the user's OpenID Identifier in the OpenID Connect ID token. profileImageSize?\tnumber\tiOS only. The desired height and width of the profile image. Default 120px scopes?\tstring[]\tiOS only. The Google API scopes to request access to. Use requestAuthorization to request additional scopes on Android. Default [&quot;email&quot;, &quot;profile&quot;] webClientId\tWebClientId\tThe web client ID obtained from Google Cloud console. In One-tap module only, pass autoDetect to automatically determine the value from Firebase config file.    ","version":null,"tagName":"h3"},{"title":"OneTapCreateAccountParams​","type":1,"pageTitle":"API reference","url":"/docs/api#onetapcreateaccountparams","content":" OneTapCreateAccountParams: OneTapSignInParams &amp; {accountName: string;requestVerifiedPhoneNumber: boolean; }  Type declaration​  Name\tType\tDescriptionaccountName?\tstring\tiOS only. An account name present on the device that should be used. Example your_email@gmail.com requestVerifiedPhoneNumber?\tboolean\tAndroid only. Whether to request for a verified phone number during sign-ups. Requesting it doesn't guarantee that it will be provided in the response. Default false    ","version":null,"tagName":"h3"},{"title":"OneTapExplicitSignInParams​","type":1,"pageTitle":"API reference","url":"/docs/api#onetapexplicitsigninparams","content":" OneTapExplicitSignInParams: OneTapSignInParams &amp; {accountName: string; }  Type declaration​  Name\tType\tDescriptionaccountName?\tstring\tiOS only. An account name present on the device that should be used. Example your_email@gmail.com    ","version":null,"tagName":"h3"},{"title":"OneTapExplicitSignInResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#onetapexplicitsigninresponse","content":" OneTapExplicitSignInResponse: OneTapSuccessResponse | CancelledResponse    ","version":null,"tagName":"h3"},{"title":"OneTapResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#onetapresponse","content":" OneTapResponse: OneTapSuccessResponse | CancelledResponse | NoSavedCredentialFound  The response object for OneTap's signIn and createAccount.    ","version":null,"tagName":"h3"},{"title":"OneTapSignInParams​","type":1,"pageTitle":"API reference","url":"/docs/api#onetapsigninparams","content":" OneTapSignInParams: {nonce: string;skipPrompt: boolean; } &amp; ReducedWebSignInOptions  Learn more about additional web-only parameters at Google's reference documentation.  Type declaration​  Name\tType\tDescriptionnonce?\tstring\tCurrently supported only on the Android and Web. A cryptographically random value used to mitigate replay attacks. skipPrompt?\tboolean\tWeb only. When calling any of the sign-in methods, a prompt is displayed by default on the top-right of the web page. Set this to true to only allow signing in via the WebGoogleSigninButton. Default false    ","version":null,"tagName":"h3"},{"title":"OneTapSuccessResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#onetapsuccessresponse","content":" OneTapSuccessResponse: {data: OneTapUser;type: &quot;success&quot;; }  The response object when the user successfully signs in.  Type declaration​  Name\tTypedata\tOneTapUser type\t&quot;success&quot;    ","version":null,"tagName":"h3"},{"title":"OneTapUser​","type":1,"pageTitle":"API reference","url":"/docs/api#onetapuser","content":" OneTapUser: {credentialOrigin: CredentialResponse[&quot;select_by&quot;];idToken: string;serverAuthCode: string | null;user: {email: string | null;familyName: string | null;givenName: string | null;id: string;name: string | null;phoneNumber: string | null;photo: string | null; }; }  Type declaration​  Name\tType\tDescriptioncredentialOrigin\tCredentialResponse[&quot;select_by&quot;]\tThe credential origin. This is the method that was used to sign in the user. On native platforms, this is always &quot;user&quot;. On the web it's a value from a union type. idToken\tstring\t- serverAuthCode\tstring | null\tiOS only. Not null only if a valid webClientId and offlineAccess: true was specified in configure(). Call requestAuthorization() to obtain it on Android. user\t{email: string | null;familyName: string | null;givenName: string | null;id: string;name: string | null;phoneNumber: string | null;photo: string | null; }\t- user.email\tstring | null\t- user.familyName\tstring | null\t- user.givenName\tstring | null\t- user.id\tstring\t- user.name\tstring | null\t- user.phoneNumber\tstring | null\tAndroid only, and only for createAccount. Requires setting requestVerifiedPhoneNumber to true. user.photo\tstring | null\t-    ","version":null,"tagName":"h3"},{"title":"RequestAuthorizationParams​","type":1,"pageTitle":"API reference","url":"/docs/api#requestauthorizationparams","content":" RequestAuthorizationParams: {accountName: string;hostedDomain: string;offlineAccess: {enabled: boolean;forceCodeForRefreshToken: boolean; };scopes: string[]; }  Learn more in the guide.  Type declaration​  Name\tType\tDescriptionaccountName?\tstring\tAndroid only. Specifies an account on the device that should be used. hostedDomain?\tstring\tAndroid only. Specifies a hosted domain restriction. By setting this, authorization will be restricted to accounts of the user in the specified domain. offlineAccess?\t{enabled: boolean;forceCodeForRefreshToken: boolean; }\t- offlineAccess.enabled\tboolean\tWhether to enable offline access. If enabled, serverAuthCode will be returned in the response. offlineAccess.forceCodeForRefreshToken?\tboolean\tAndroid only. If true, the granted code can be exchanged for an access token and a refresh token. Only use true if your server has suffered some failure and lost the user's refresh token. scopes\tstring[]\tThe Google API scopes to request access to. See scopes docs.    ","version":null,"tagName":"h3"},{"title":"GoogleOneTapSignIn​","type":1,"pageTitle":"API reference","url":"/docs/api#googleonetapsignin","content":" const GoogleOneTapSignIn: complex type, see below  The entry point of the One-tap Sign In API, exposed as GoogleOneTapSignIn.  On the Web, the signatures of signIn, presentExplicitSignIn, and createAccount are callback-based and on native they are Promise-based. Read more in the guide.  Type declaration​  Name\tTypeconfigure\t(params: OneTapConfigureParams) =&gt; void signIn\t(params?: OneTapSignInParams) =&gt; Promise&lt;OneTapResponse&gt; createAccount\t(params?: OneTapCreateAccountParams) =&gt; Promise&lt;OneTapResponse&gt; presentExplicitSignIn\t(params?: OneTapExplicitSignInParams) =&gt; Promise&lt;OneTapExplicitSignInResponse&gt; requestAuthorization\t(options: RequestAuthorizationParams) =&gt; Promise&lt;AuthorizationResponse&gt; signOut\t(emailOrUniqueId: string) =&gt; Promise&lt;null&gt;  ","version":null,"tagName":"h3"},{"title":"Original Google sign in​","type":1,"pageTitle":"API reference","url":"/docs/api#original-google-sign-in","content":" ","version":null,"tagName":"h2"},{"title":"AddScopesParams​","type":1,"pageTitle":"API reference","url":"/docs/api#addscopesparams","content":" AddScopesParams: {scopes: string[]; }  Type declaration​  Name\tType\tDescriptionscopes\tstring[]\tThe Google API scopes to request access to. Default [&quot;email&quot;, &quot;profile&quot;]    ","version":null,"tagName":"h3"},{"title":"ConfigureParams​","type":1,"pageTitle":"API reference","url":"/docs/api#configureparams","content":" ConfigureParams: ClientIdOrPlistPath &amp; {accountName: string;forceCodeForRefreshToken: boolean;hostedDomain: string;offlineAccess: boolean;openIdRealm: string;profileImageSize: number;scopes: string[];webClientId: WebClientId; }  Type declaration​  Name\tType\tDescriptionaccountName?\tstring\tAndroid only. An account name that should be prioritized. forceCodeForRefreshToken?\tboolean\tAndroid only. Only set to true if your server has suffered some failure and lost the user's refresh token. hostedDomain?\tstring\tSpecifies a hosted domain restriction. By setting this, authorization will be restricted to accounts of the user in the specified domain. offlineAccess?\tboolean\tMust be true if you wish to access user APIs on behalf of the user from your own server. When offline access is requested, an authorization code is returned so the server can use the authorization code to exchange for access token and refresh token. The access token allows the server to access Google data on behalf of the user. openIdRealm?\tstring\tiOS only. The OpenID2 realm of the home web server. This allows Google to include the user's OpenID Identifier in the OpenID Connect ID token. profileImageSize?\tnumber\tiOS only. The desired height and width of the profile image. Default 120px scopes?\tstring[]\tThe Google API scopes to request access to. Default [&quot;email&quot;, &quot;profile&quot;] webClientId?\tWebClientId\tThe web client ID obtained from Google Cloud console. Required for offline access.    ","version":null,"tagName":"h3"},{"title":"GetTokensResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#gettokensresponse","content":" GetTokensResponse: {accessToken: string;idToken: string; }  Type declaration​  Name\tTypeaccessToken\tstring idToken\tstring    ","version":null,"tagName":"h3"},{"title":"HasPlayServicesParams​","type":1,"pageTitle":"API reference","url":"/docs/api#hasplayservicesparams","content":" HasPlayServicesParams: {showPlayServicesUpdateDialog: boolean; }  Type declaration​  Name\tType\tDescriptionshowPlayServicesUpdateDialog?\tboolean\tWhether to show a dialog that prompts the user to install Google Play Services, if they don't have them installed. Default true    ","version":null,"tagName":"h3"},{"title":"SignInParams​","type":1,"pageTitle":"API reference","url":"/docs/api#signinparams","content":" SignInParams: {loginHint: string; }  Type declaration​  Name\tType\tDescriptionloginHint?\tstring\tiOS only. The user's ID, or email address, to be prefilled in the authentication UI if possible. See docs here.    ","version":null,"tagName":"h3"},{"title":"SignInResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#signinresponse","content":" SignInResponse: SignInSuccessResponse | CancelledResponse    ","version":null,"tagName":"h3"},{"title":"SignInSilentlyResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#signinsilentlyresponse","content":" SignInSilentlyResponse: SignInSuccessResponse | NoSavedCredentialFound  The response object for calling signInSilently. Either the user details are available (without user interaction) or there was no saved credential found.    ","version":null,"tagName":"h3"},{"title":"SignInSuccessResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#signinsuccessresponse","content":" SignInSuccessResponse: {data: User;type: &quot;success&quot;; }  The response object when the user signs in successfully.  Type declaration​  Name\tType\tDescriptiondata\tUser\tThe user details. type\t&quot;success&quot;\t-    ","version":null,"tagName":"h3"},{"title":"User​","type":1,"pageTitle":"API reference","url":"/docs/api#user","content":" User: {idToken: string | null;scopes: string[];serverAuthCode: string | null;user: {email: string;familyName: string | null;givenName: string | null;id: string;name: string | null;photo: string | null; }; }  Type declaration​  Name\tType\tDescriptionidToken\tstring | null\tJWT (JSON Web Token) that serves as a secure credential for your user's identity. scopes\tstring[]\tThe Google API scopes that the user granted access to. serverAuthCode\tstring | null\tCode that you can securely send to your server to exchange for an access and refresh token. Use the access token to call Google APIs on behalf of the user and, optionally, store the refresh token to acquire a new access token when the access token expires. Not null only if a valid webClientId and offlineAccess was enabled in configure(). user\t{email: string;familyName: string | null;givenName: string | null;id: string;name: string | null;photo: string | null; }\t- user.email\tstring\t- user.familyName\tstring | null\t- user.givenName\tstring | null\t- user.id\tstring\t- user.name\tstring | null\t- user.photo\tstring | null\t-    ","version":null,"tagName":"h3"},{"title":"GoogleSignin​","type":1,"pageTitle":"API reference","url":"/docs/api#googlesignin","content":" const GoogleSignin: complex type, see below  The entry point of the Google Sign In API, exposed as GoogleSignin.  Type declaration​  Name\tTypeaddScopes\t(options: AddScopesParams) =&gt; Promise&lt;SignInResponse | null&gt; clearCachedAccessToken\t(tokenString: string) =&gt; Promise&lt;null&gt; configure\t(options?: ConfigureParams) =&gt; void getCurrentUser\t() =&gt; User | null getTokens\t() =&gt; Promise&lt;GetTokensResponse&gt; hasPlayServices\t(options?: HasPlayServicesParams) =&gt; Promise&lt;boolean&gt; hasPreviousSignIn\t() =&gt; boolean revokeAccess\t() =&gt; Promise&lt;null&gt; signIn\t(options: SignInParams) =&gt; Promise&lt;SignInResponse&gt; signInSilently\t() =&gt; Promise&lt;SignInSilentlyResponse&gt; signOut\t() =&gt; Promise&lt;null&gt;  ","version":null,"tagName":"h3"},{"title":"Constants​","type":1,"pageTitle":"API reference","url":"/docs/api#constants","content":" ","version":null,"tagName":"h2"},{"title":"statusCodes​","type":1,"pageTitle":"API reference","url":"/docs/api#statuscodes","content":" const statusCodes: Readonly&lt;{IN_PROGRESS: string;ONE_TAP_START_FAILED: string;PLAY_SERVICES_NOT_AVAILABLE: string; }&gt;  Read more about the meaning of the error codes in the guide.  Type declaration​  Name\tTypeIN_PROGRESS\tstring ONE_TAP_START_FAILED\tstring PLAY_SERVICES_NOT_AVAILABLE\tstring  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"API reference","url":"/docs/api#functions","content":" ","version":null,"tagName":"h2"},{"title":"isCancelledResponse()​","type":1,"pageTitle":"API reference","url":"/docs/api#iscancelledresponse","content":" isCancelledResponse(response: OneTapResponse): response is CancelledResponse  TypeScript helper to check if a response is a cancelled response. This is the same as checking if the response.type === &quot;cancelled&quot;.  Use this if you prefer to use a function instead of comparing with a raw string.  It supports both One Tap and Original Google Sign In responses.  Parameters​  Parameter\tTyperesponse\tOneTapResponse  Returns​  response is CancelledResponse  Example​  const response = await GoogleOneTapSignIn.createAccount(); if (isCancelledResponse(response)) { // handle cancelled response }     ","version":null,"tagName":"h3"},{"title":"isErrorWithCode()​","type":1,"pageTitle":"API reference","url":"/docs/api#iserrorwithcode","content":" isErrorWithCode(error: any): error is NativeModuleError  TypeScript helper to check if an object has the code property. This is used to avoid as casting when you access the code property on errors returned by the module.  Parameters​  Parameter\tTypeerror\tany  Returns​  error is NativeModuleError    ","version":null,"tagName":"h3"},{"title":"isNoSavedCredentialFoundResponse()​","type":1,"pageTitle":"API reference","url":"/docs/api#isnosavedcredentialfoundresponse","content":" isNoSavedCredentialFoundResponse(response: OneTapResponse): response is NoSavedCredentialFound  TypeScript helper to check if a response is a noSavedCredentialFound response. This is the same as checking if the response.type === &quot;noSavedCredentialFound&quot;.  Use this if you prefer to use a function instead of comparing with a raw string.  It supports both One Tap and Original Google Sign In responses.  Parameters​  Parameter\tTyperesponse\tOneTapResponse  Returns​  response is NoSavedCredentialFound  Example​  const response = await GoogleOneTapSignIn.signIn(); if (isNoSavedCredentialFoundResponse(response)) { // the case when no user was previously signed in }     ","version":null,"tagName":"h3"},{"title":"isSuccessResponse()​","type":1,"pageTitle":"API reference","url":"/docs/api#issuccessresponse","content":" isSuccessResponse(response: OneTapResponse): response is OneTapSuccessResponse  TypeScript helper to check if a response is a cancelled response. This is the same as checking if the response.type === &quot;cancelled&quot;.  Use this if you prefer to use a function instead of comparing with a raw string.  It supports both One Tap and Original Google Sign In responses.  Parameters​  Parameter\tTyperesponse\tOneTapResponse  Returns​  response is OneTapSuccessResponse  Example​  const response = await GoogleOneTapSignIn.createAccount(); if (isSuccessResponse(response)) { // handle user signed in }   ","version":null,"tagName":"h3"},{"title":"React Components​","type":1,"pageTitle":"API reference","url":"/docs/api#react-components","content":" ","version":null,"tagName":"h2"},{"title":"GoogleSigninButtonProps​","type":1,"pageTitle":"API reference","url":"/docs/api#googlesigninbuttonprops","content":" GoogleSigninButtonProps: ViewProps &amp; {color: &quot;dark&quot; | &quot;light&quot;;disabled: boolean;onPress: () =&gt; void;size: number; }  Type declaration​  Name\tTypecolor?\t&quot;dark&quot; | &quot;light&quot; disabled?\tboolean onPress?\t() =&gt; void size?\tnumber    ","version":null,"tagName":"h3"},{"title":"WebGoogleSignInButtonProps​","type":1,"pageTitle":"API reference","url":"/docs/api#webgooglesigninbuttonprops","content":" WebGoogleSignInButtonProps: Omit&lt;GsiButtonConfiguration, &quot;logo_alignment&quot;&gt; &amp; {logoAlignment: GsiButtonConfiguration[&quot;logo_alignment&quot;];onError: (error: Error) =&gt; void; }  Type declaration​  Name\tTypelogoAlignment?\tGsiButtonConfiguration[&quot;logo_alignment&quot;] onError?\t(error: Error) =&gt; void    ","version":null,"tagName":"h3"},{"title":"GoogleSigninButton()​","type":1,"pageTitle":"API reference","url":"/docs/api#googlesigninbutton","content":" GoogleSigninButton(props: GoogleSigninButtonProps): Element  Parameters​  Parameter\tTypeprops\tGoogleSigninButtonProps  Returns​  Element    ","version":null,"tagName":"h3"},{"title":"WebGoogleSigninButton()​","type":1,"pageTitle":"API reference","url":"/docs/api#webgooglesigninbutton","content":" WebGoogleSigninButton(props: WebGoogleSignInButtonProps): Element  Parameters​  Parameter\tTypeprops\tWebGoogleSignInButtonProps  Returns​  Element  ","version":null,"tagName":"h3"},{"title":"Type Aliases​","type":1,"pageTitle":"API reference","url":"/docs/api#type-aliases","content":" ","version":null,"tagName":"h2"},{"title":"CancelledResponse​","type":1,"pageTitle":"API reference","url":"/docs/api#cancelledresponse","content":" CancelledResponse: {data: null;type: &quot;cancelled&quot;; }  The response object when the user cancels the flow for any operation that requires user interaction.  On the Web, this is also returned while cooldown period is active. Detecting the cooldown period itself is not possible on the Web for user privacy reasons. On Android, it can be detected via ONE_TAP_START_FAILED  Type declaration​  Name\tTypedata\tnull type\t&quot;cancelled&quot;    ","version":null,"tagName":"h3"},{"title":"ClientIdOrPlistPath​","type":1,"pageTitle":"API reference","url":"/docs/api#clientidorplistpath","content":" ClientIdOrPlistPath: {iosClientId: string; } | {googleServicePlistPath: string; }  iOS only. Configures the iOS client ID. By default, the iOS client ID is taken from the GoogleService-Info.plist Firebase config file (if present).  You can specify a different bundle path for the config file, e.g. &quot;GoogleService-Info-Staging&quot;.  Alternatively, set the client ID explicitly by providing iosClientId.    ","version":null,"tagName":"h3"},{"title":"NoSavedCredentialFound​","type":1,"pageTitle":"API reference","url":"/docs/api#nosavedcredentialfound","content":" NoSavedCredentialFound: {data: null;type: &quot;noSavedCredentialFound&quot;; }  The response to calling One Tap's signIn and Original Google Sign In's signInSilently when no user was previously signed in.  Type declaration​  Name\tTypedata\tnull type\t&quot;noSavedCredentialFound&quot;  ","version":null,"tagName":"h3"},{"title":"Web One-tap sign in module​","type":1,"pageTitle":"API reference","url":"/docs/api#web-one-tap-sign-in-module","content":" ","version":null,"tagName":"h2"},{"title":"WebOneTapSignInCallbacks​","type":1,"pageTitle":"API reference","url":"/docs/api#webonetapsignincallbacks","content":" WebOneTapSignInCallbacks: {momentListener: MomentListener;onError: (error: NativeModuleError) =&gt; void | Promise&lt;void&gt;;onResponse: (userInfo: OneTapExplicitSignInResponse) =&gt; void | Promise&lt;void&gt;; }  When using One-tap on the Web, the sign in result is delivered via a callback, not via a promise. The shape of data delivered to the callback is the same as the shape of the data in the promise, enabling code reuse. Read more in the guide.  Type declaration​  Name\tType\tDescriptionmomentListener?\tMomentListener\tA callback function that is called when important events take place. See reference. onError\t(error: NativeModuleError) =&gt; void | Promise&lt;void&gt;\tCalled when an error occurs. You can use the code property of the error to determine the reason for the error. The reported errors on the web are in the same format as the errors reported on the native platforms, so you can reuse your error handling code. onResponse\t(userInfo: OneTapExplicitSignInResponse) =&gt; void | Promise&lt;void&gt;\tCalled when the user successfully signs in, or cancels the sign in, either using the One-tap flow or the button flow. ","version":null,"tagName":"h3"},{"title":"Migrating to new JS API","type":0,"sectionRef":"#","url":"/docs/migrating","content":"","keywords":"","version":null},{"title":"One-tap sign in module​","type":1,"pageTitle":"Migrating to new JS API","url":"/docs/migrating#one-tap-sign-in-module","content":" Add the configure method to your code. This method is required to be called to configure the module. Change the signIn, createAccount, presentExplicitSignIn, and requestAuthorization methods to use the new apis built on OneTapResponse:  const signIn = async () =&gt; { try { - const userInfo = await GoogleOneTapSignIn.signIn({ - webClientId: `autoDetect`, // works only if you use Firebase - iosClientId: config.iosClientId, // only needed if you're not using Firebase - }); - setState({ userInfo }); + const response = await GoogleOneTapSignIn.signIn(); + + if (response.type === 'success') { + setState({ userInfo: response.data }); + } else if (response.type === 'noSavedCredentialFound') { + // Android and Apple only. No saved credential found, call `createAccount` + } } catch (error) { if (isErrorWithCode(error)) { switch (error.code) { - case statusCodes.NO_SAVED_CREDENTIAL_FOUND: - // Android and Apple only. No saved credential found, call `createAccount` - break; - case statusCodes.SIGN_IN_CANCELLED: - // sign in was cancelled - break; case statusCodes.ONE_TAP_START_FAILED: // Android-only, you probably have hit rate limiting. // On Android, you can still call `presentExplicitSignIn` in this case. break; case statusCodes.PLAY_SERVICES_NOT_AVAILABLE: // Android-only: play services not available or outdated // Web: when calling an unimplemented api (requestAuthorization) break; default: // something else happened } } else { // an error that's not related to google sign in occurred } } };   If requesting offline access in requestAuthorization on Android, add enabled: true:  await GoogleOneTapSignIn.requestAuthorization({ offlineAccess: { + enabled: true, }, });   ","version":null,"tagName":"h2"},{"title":"Original Sign In​","type":1,"pageTitle":"Migrating to new JS API","url":"/docs/migrating#original-sign-in","content":" Follow step 2. from above for signIn, addScopes and signInSilently methods.remove SIGN_IN_REQUIRED mentions. This case is now handled with NoSavedCredentialFound object:  const getCurrentUserInfo = async () =&gt; { try { const response = await GoogleSignin.signInSilently(); + if (isSuccessResponse(response)) { + setState({ userInfo: response.data }) + } else if (isNoSavedCredentialFoundResponse(response)) { + // user has not signed in yet + } - setState({ userInfo: response }); } catch (error) { - if (error.code === statusCodes.SIGN_IN_REQUIRED) { - // user has not signed in yet - } else { - // some other error - } } };  ","version":null,"tagName":"h3"},{"title":"Other libraries","type":0,"sectionRef":"#","url":"/docs/other-libs","content":"","keywords":"","version":null},{"title":"react-native-theme-control​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-native-theme-control","content":" Natively control react native application theme at runtime and persist it for the next app start.  ","version":null,"tagName":"h3"},{"title":"react-navigation-header-buttons​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-navigation-header-buttons","content":" Easily render header buttons for react-navigation.  ","version":null,"tagName":"h3"},{"title":"react-to-imperative​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-to-imperative","content":" Convert React (Native) components for imperative use.  ","version":null,"tagName":"h3"},{"title":"react-native-datetimepicker​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-native-datetimepicker","content":" React Native date &amp; time picker component for iOS and Android.  ","version":null,"tagName":"h3"},{"title":"JS-lingui​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#js-lingui","content":" A readable, automated, and optimized internationalization for JavaScript.  ","version":null,"tagName":"h3"},{"title":"react-native-document-picker​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-native-document-picker","content":" Document Picker for React Native. ","version":null,"tagName":"h3"},{"title":"Android setup guide","type":0,"sectionRef":"#","url":"/docs/setting-up/android","content":"","keywords":"","version":null},{"title":"Ensure compatibility​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#ensure-compatibility","content":" If you're using the sponsor package:  If you're using RN &gt;= 0.73, you're good to go.  But if you're using RN 0.72 or older, you need to either:  install version 12.1.0 of the packageor install version &gt;= 13 AND specify compileSdkVersion 34 in android/build.gradle of your project as highlighted below  ","version":null,"tagName":"h3"},{"title":"Google project configuration​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#google-project-configuration","content":" Follow this guide to set up your project and get the configuration information which you'll need later.  ","version":null,"tagName":"h2"},{"title":"Without Firebase​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#without-firebase","content":" You don't need to do any more modifications.  ","version":null,"tagName":"h3"},{"title":"With Firebase​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#with-firebase","content":" 1. Download the configuration file​  Download the configuration file (google-services.json) from Firebase into your project according to this guide.  2. Update gradle files​  Update android/build.gradle with  android/build.gradle buildscript { ext { buildToolsVersion = &quot;a.b.c&quot; minSdkVersion = x compileSdkVersion = y targetSdkVersion = z googlePlayServicesAuthVersion = &quot;20.7.0&quot; // &lt;--- use this version or newer } // ... dependencies { classpath 'com.google.gms:google-services:4.4.0' // &lt;--- use this version or newer } }   Update android/app/build.gradle with  android/app/build.gradle apply plugin: &quot;com.android.application&quot; apply plugin: &quot;org.jetbrains.kotlin.android&quot; apply plugin: &quot;com.facebook.react&quot; apply plugin: 'com.google.gms.google-services'   This ends the setup for Firebase.  ","version":null,"tagName":"h3"},{"title":"Choose Dependency versions (optional)​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#choose-dependency-versions-optional","content":" The library depends on com.google.android.gms:play-services-auth, as seen in build.gradle. If needed, you may control their versions by the ext closure, as seen in the code snippet above.  ","version":null,"tagName":"h2"},{"title":"Running on simulator or device​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#running-on-simulator-or-device","content":" Make sure you have an emulator / device with Google Play Services installed. ","version":null,"tagName":"h2"},{"title":"Expo setup","type":0,"sectionRef":"#","url":"/docs/setting-up/expo","content":"","keywords":"","version":null},{"title":"Prepare your Expo project​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#prepare-your-expo-project","content":" info With Expo SDK 50, minimum iOS version was bumped to 13.4. In case you get an error during pod install step, please consult release notes to determine the right version of this package to install.  note This package cannot be used in &quot;Expo Go&quot; because it requires custom native code. However, you can add custom native code to an Expo app by using a development build. Using a development build is the recommended approach for production apps, and is documented in this guide.  npx expo install @react-native-google-signin/google-signin   ","version":null,"tagName":"h2"},{"title":"Add config plugin​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#add-config-plugin","content":" After installing the npm package, add a config plugin (read more details below) to the plugins array of your app.json or app.config.js. There are 2 config plugins available: for projects with Firebase, and without Firebase.  ","version":null,"tagName":"h2"},{"title":"Expo without Firebase​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#expo-without-firebase","content":" If you're not using Firebase, provide the iosUrlScheme option to the config plugin.  To obtain iosUrlScheme, go to the Google Cloud Console and copy the &quot;iOS URL scheme&quot; from your iOS client in the &quot;OAuth 2.0 Client IDs&quot; section.  app.json|js { &quot;expo&quot;: { &quot;plugins&quot;: [ [ &quot;@react-native-google-signin/google-signin&quot;, { &quot;iosUrlScheme&quot;: &quot;com.googleusercontent.apps._some_id_here_&quot; } ] ] } }   ","version":null,"tagName":"h3"},{"title":"Expo and Firebase​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#expo-and-firebase","content":" If you are using Firebase, obtain the 2 Firebase config files and place them into your project. Then specify the path to the files:  app.json|js { &quot;expo&quot;: { &quot;plugins&quot;: [&quot;@react-native-google-signin/google-signin&quot;], &quot;android&quot;: { &quot;googleServicesFile&quot;: &quot;./google-services.json&quot; }, &quot;ios&quot;: { &quot;googleServicesFile&quot;: &quot;./GoogleService-Info.plist&quot; } } }   ","version":null,"tagName":"h3"},{"title":"Ensure compatibility​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#ensure-compatibility","content":" If you're using the sponsor package:  If you're using Expo SDK &gt;= 50, you're good to go.  But if you're using Expo 49 or older, you need to either:  install version 12.1.0 of the packageor install version &gt;= 13 AND specify compileSdkVersion 34 of your project using Expo BuildProperties  ","version":null,"tagName":"h2"},{"title":"Rebuild the app​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#rebuild-the-app","content":" Then run the following to generate the native project directories.  npx expo prebuild --clean   Next, rebuild your app and you're good to go!  npx expo run:android &amp;&amp; npx expo run:ios  ","version":null,"tagName":"h2"},{"title":"Original Google sign in","type":0,"sectionRef":"#","url":"/docs/original","content":"","keywords":"","version":null},{"title":"configure​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#configure","content":" signature: (options: ConfigureParams) =&gt; void  It is mandatory to call this method before attempting to call signIn() and signInSilently(). This method is synchronous, meaning you can call signIn / signInSilently right after it. Typically, you would call configure only once, soon after your app starts. All parameters are optional.  Example usage with default options: you'll get user email and basic profile info.  import { GoogleSignin } from '@react-native-google-signin/google-signin'; GoogleSignin.configure();   An example with all options enumerated:  GoogleSignin.configure({ webClientId: '&lt;FROM DEVELOPER CONSOLE&gt;', // client ID of type WEB for your server. Required to get the `idToken` on the user object, and for offline access. scopes: ['https://www.googleapis.com/auth/drive.readonly'], // what API you want to access on behalf of the user, default is email and profile offlineAccess: true, // if you want to access Google API on behalf of the user FROM YOUR SERVER hostedDomain: '', // specifies a hosted domain restriction forceCodeForRefreshToken: true, // [Android] related to `serverAuthCode`, read the docs link below *. accountName: '', // [Android] specifies an account name on the device that should be used iosClientId: '&lt;FROM DEVELOPER CONSOLE&gt;', // [iOS] if you want to specify the client ID of type iOS (otherwise, it is taken from GoogleService-Info.plist) googleServicePlistPath: '', // [iOS] if you renamed your GoogleService-Info file, new name here, e.g. &quot;GoogleService-Info-Staging&quot; openIdRealm: '', // [iOS] The OpenID2 realm of the home web server. This allows Google to include the user's OpenID Identifier in the OpenID Connect ID token. profileImageSize: 120, // [iOS] The desired height (and width) of the profile image. Defaults to 120px });   * forceCodeForRefreshToken docs    ","version":null,"tagName":"h3"},{"title":"Obtaining configuration information","type":0,"sectionRef":"#","url":"/docs/setting-up/get-config-file","content":"","keywords":"","version":null},{"title":"Android​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#android","content":" Read below on how to set up Google Sign In for your Android app.  ","version":null,"tagName":"h2"},{"title":"Obtain SHA-1 certificate fingerprints​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#obtain-sha-1-certificate-fingerprints","content":" warning This is crucial for Google Sign-In to work on Android. If not done correctly, you will get the infamous DEVELOPER_ERROR error.  You likely have multiple signing configurations - for example for building local debug and release APKs, builds on Expo EAS, and Play App Signing for production deployments. You will need to get the SHA1 certificate fingerprints for all keystores you intend to use and enter them all in Firebase or Google Cloud Console.    When using Expo EASWhen developing locallyWhen releasing via Google Play Store If you're using Expo EAS, read credentials docs to learn how to obtain information about how your app is signed with EAS.  ","version":null,"tagName":"h3"},{"title":"Add SHA-1 hashes to Firebase or Google Cloud Console​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#add-sha-1-hashes-to-firebase-or-google-cloud-console","content":" When using FirebaseWhen not using Firebase Sign in to Firebase and open your project.Click the Settings icon and select Project settings.In the &quot;Your apps&quot; card, select the app you need to add SHA1 to.Click &quot;Add fingerprint&quot;.Check that &quot;Package name&quot; is correct.Download the google-services.json file.  ","version":null,"tagName":"h3"},{"title":"iOS​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#ios","content":" Read below on how to set up Google Sign In for your iOS app.  When using FirebaseWhen not using Firebase Sign in to Firebase and open your project.Click the Settings icon and select Project settings.In the &quot;Your apps&quot; card, select the app.Check that &quot;Bundle ID&quot; is correct.Download the GoogleService-Info.plist file. ","version":null,"tagName":"h2"},{"title":"signIn​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#signin","content":" signature: (options: SignInParams) =&gt; Promise&lt;SignInResponse&gt;  Prompts a modal to let the user sign in into your application. Resolved promise returns an SignInResponse object. Rejects with an error otherwise.  signIn example // import statusCodes along with GoogleSignin import { GoogleSignin, statusCodes, } from '@react-native-google-signin/google-signin'; // Somewhere in your code const signIn = async () =&gt; { try { await GoogleSignin.hasPlayServices(); const response = await GoogleSignin.signIn(); if (isSuccessResponse(response)) { setState({ userInfo: response.data }); } else { // sign in was cancelled by user } } catch (error) { if (isErrorWithCode(error)) { switch (error.code) { case statusCodes.IN_PROGRESS: // operation (eg. sign in) already in progress break; case statusCodes.PLAY_SERVICES_NOT_AVAILABLE: // Android only, play services not available or outdated break; default: // some other error happened } } else { // an error that's not related to google sign in occurred } } };       ","version":null,"tagName":"h3"},{"title":"Utility Functions​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#utility-functions","content":" tip There are 4 helper functions available:  isErrorWithCode for processing errorsisSuccessResponse for checking if a response represents a successful operation. Same as checking response.type === 'success'.isNoSavedCredentialFoundResponse for checking if a response represents no saved credentials case. Same as checking response.type === 'noSavedCredentialFound'.isCancelledResponse for checking if a response represents user cancellation case. Same as checking response.type === 'cancelled'.    ","version":null,"tagName":"h3"},{"title":"One-tap Google sign in","type":0,"sectionRef":"#","url":"/docs/one-tap","content":"","keywords":"","version":null},{"title":"configure​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#configure","content":" signature: (params: OneTapConfigureParams) =&gt; void  It is mandatory to call this method before attempting to call any of the sign-in methods. This method is synchronous, meaning you can call e.g. signIn right after it. Typically, you would call configure only once, soon after your app starts.  webClientId is a required parameter. Use &quot;autoDetect&quot; for automatic webClientId detection. All other parameters are optional.  Example of calling the configure() method GoogleOneTapSignIn.configure({ webClientId: 'autoDetect', });     ","version":null,"tagName":"h3"},{"title":"addScopes​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#addscopes","content":" signature: (options: AddScopesParams) =&gt; Promise&lt;SignInResponse | null&gt;  This method resolves with SignInResponse object or with null if no user is currently logged in.  You may not need this call: you can supply required scopes to the configure call. However, if you want to gain access to more scopes later, use this call.  Example:  const response = await GoogleSignin.addScopes({ scopes: ['https://www.googleapis.com/auth/user.gender.read'], });     ","version":null,"tagName":"h3"},{"title":"signInSilently​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#signinsilently","content":" signature: () =&gt; Promise&lt;SignInSilentlyResponse&gt;  May be called e.g. after of your main component mounts. This method returns a Promise that resolves with the SignInSilentlyResponse object and rejects with an error otherwise.  To see how to handle errors read signIn() method  const getCurrentUser = async () =&gt; { try { const response = await GoogleSignin.signInSilently(); if (isSuccessResponse(response)) { setState({ userInfo: response.data }); } else if (isNoSavedCredentialFoundResponse(response)) { // user has not signed in yet } } catch (error) { // handle errror } };     ","version":null,"tagName":"h3"},{"title":"hasPreviousSignIn​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#hasprevioussignin","content":" signature: () =&gt; boolean  This synchronous method may be used to find out whether some user previously signed in.  Note that hasPreviousSignIn() can return true but getCurrentUser() can return null, in which case you can call signInSilently() to recover the user. However, it may happen that calling signInSilently() rejects with an error (e.g. due to a network issue).  const hasPreviousSignIn = async () =&gt; { const hasPreviousSignIn = GoogleSignin.hasPreviousSignIn(); setState({ hasPreviousSignIn }); };     ","version":null,"tagName":"h3"},{"title":"getCurrentUser​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#getcurrentuser","content":" signature: () =&gt; User | null  This is a synchronous method that returns null or User object of the currently signed-in user.  const getCurrentUser = async () =&gt; { const currentUser = GoogleSignin.getCurrentUser(); setState({ currentUser }); };     ","version":null,"tagName":"h3"},{"title":"clearCachedAccessToken​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#clearcachedaccesstoken","content":" signature: (accessTokenString: string) =&gt; Promise&lt;null&gt;  This method only has an effect on Android. You may run into a 401 Unauthorized error when a token is invalid. Call this method to remove the token from local cache and then call getTokens() to get fresh tokens. Calling this method on iOS does nothing and always resolves. This is because on iOS, getTokens() always returns valid tokens, refreshing them first if they have expired or are about to expire (see docs).    ","version":null,"tagName":"h3"},{"title":"getTokens​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#gettokens","content":" signature: () =&gt; Promise&lt;GetTokensResponse&gt;  Resolves with an object containing { idToken: string, accessToken: string, } or rejects with an error. Note that using accessToken for identity assertion on your backend server is discouraged.    ","version":null,"tagName":"h3"},{"title":"signOut​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#signout","content":" signature: () =&gt; Promise&lt;null&gt;  Signs out the current user.  const signOut = async () =&gt; { try { await GoogleSignin.signOut(); setState({ user: null }); // Remember to remove the user from your app's state as well } catch (error) { console.error(error); } };     ","version":null,"tagName":"h3"},{"title":"revokeAccess​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#revokeaccess","content":" signature: () =&gt; Promise&lt;null&gt;  Removes your application from the user authorized applications. Read more about it here and here.  const revokeAccess = async () =&gt; { try { await GoogleSignin.revokeAccess(); // Google Account disconnected from your app. // Perform clean-up actions, such as deleting data associated with the disconnected account. } catch (error) { console.error(error); } };     ","version":null,"tagName":"h3"},{"title":"hasPlayServices​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#hasplayservices","content":" signature: (options: HasPlayServicesParams) =&gt; Promise&lt;boolean&gt;  Checks if device has Google Play Services installed. Always resolves to true on iOS.  Presence of up-to-date Google Play Services is required to show the sign in modal, but it is not required to perform calls to configure and signInSilently. Therefore, we recommend to call hasPlayServices directly before signIn.  try { await GoogleSignin.hasPlayServices({ showPlayServicesUpdateDialog: true }); // google services are available } catch (err) { console.error('play services are not available'); }   hasPlayServices accepts one parameter, an object which contains a single key: showPlayServicesUpdateDialog (defaults to true). When showPlayServicesUpdateDialog is set to true the library will prompt the user to take action to solve the issue, as seen in the figure below.  You may also use this call at any time to find out if Google Play Services are available and react to the result as necessary.   ","version":null,"tagName":"h3"},{"title":"signIn​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#signin","content":" signature: (params?: OneTapSignInParams) =&gt; Promise&lt;OneTapResponse&gt;  Platform\tBehaviorAndroid\tAttempts to sign in user automatically, without interaction. Docs. Apple\tAttempts to restore a previous user sign-in without interaction. Docs. Web\tAttempts to sign in user automatically, without interaction. Docs. If none is found, presents a sign-in UI. Read below for web support.  Returns a Promise that resolves with OneTapResponse or rejects in case of error.  If there is no user that was previously signed in, the promise resolves with NoSavedCredentialFound object. In that case, you can call createAccount to start a flow to create a new account. You don't need to call signIn as a response to a user action - you can call it when your app starts or when suitable.  UI screenshots Android\tiOS\tWebNo UI, no user interaction the first time. If user has signed up previously, they will see this: (no UI, no user interaction)\tThe prompt presented the first time: If user has signed in previously, they will see this:   Example of calling the signIn() method import { GoogleOneTapSignIn, statusCodes, isErrorWithCode, GoogleSignin, } from '@react-native-google-signin/google-signin'; // Somewhere in your code const signIn = async () =&gt; { try { await GoogleSignin.hasPlayServices(); const response = await GoogleOneTapSignIn.signIn(); if (isSuccessResponse(response)) { // read user's info console.log(response.data); } else if (isNoSavedCredentialFoundResponse(response)) { // Android and Apple only. // No saved credential found, call `createAccount` } } catch (error) { if (isErrorWithCode(error)) { switch (error.code) { case statusCodes.ONE_TAP_START_FAILED: // Android-only, you probably have hit rate limiting. // You can still call `presentExplicitSignIn` in this case. break; case statusCodes.PLAY_SERVICES_NOT_AVAILABLE: // Android: play services not available or outdated // Web: when calling an unimplemented api (requestAuthorization) break; default: // something else happened } } else { // an error that's not related to google sign in occurred } } };       ","version":null,"tagName":"h3"},{"title":"Utility Functions​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#utility-functions","content":" tip There are 4 helper functions available:  isErrorWithCode for processing errorsisSuccessResponse for checking if a response represents a successful operation. Same as checking response.type === 'success'.isNoSavedCredentialFoundResponse for checking if a response represents no saved credentials case. Same as checking response.type === 'noSavedCredentialFound'.isCancelledResponse for checking if a response represents user cancellation case. Same as checking response.type === 'cancelled'.    ","version":null,"tagName":"h3"},{"title":"createAccount​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#createaccount","content":" signature: (params?: OneTapCreateAccountParams) =&gt; Promise&lt;OneTapResponse&gt;  Platform\tBehaviorAndroid\tStarts a flow to sign in with your app for the first time (to create a user account). It offers a list of user accounts to choose from (multiple Google accounts can be logged in on the device). Apple\tStarts an interactive sign-in flow. Docs. It offers a list of user accounts to choose from (multiple Google accounts can be logged in on the device). Web\tPresents a one-tap prompt and waits for user interaction (it will not sign in automatically). The prompt has a slightly different styling than with signIn (configrable via the context param). Read below for web support.  You don't need to call createAccount as a response to a user action - you can call it some time after your app starts (Though keep in mind the way the dialog is presented on iOS might be inconvenient to users if they didn't ask for it) or when suitable.  Use createAccount if signIn resolved with NoSavedCredentialFound result, as indicated in the code snippet above.  Returns a Promise that resolves with OneTapResponse or rejects in case of error.  UI screenshots Android\tiOS\tWeb   await GoogleOneTapSignIn.createAccount({ nonce: 'your_nonce', });     ","version":null,"tagName":"h3"},{"title":"presentExplicitSignIn​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#presentexplicitsignin","content":" ✨since v14.2.0  signature: (params?: OneTapExplicitSignInParams) =&gt; Promise&lt;OneTapExplicitSignInResponse&gt;  Platform\tBehaviorAndroid\tPresents the sign in dialog explicitly. This is useful when the user has hit rate limiting (ONE_TAP_START_FAILED) and the one-tap flow is thus not available, or if both signIn and createAccount resolve with NoSavedCredentialFound object - which happens (in the unlikely case) when no Google account is present on the device. This will prompt the user to add a Google account. Apple\tStarts an interactive sign-in flow. Same as createAccount. Web\tPresents a one-tap prompt. Same as createAccount.  Preferably, call this method only as a reaction to when user taps a &quot;sign in with Google&quot; button.  UI screenshots Android\tiOS\tWeb   await GoogleOneTapSignIn.presentExplicitSignIn({ nonce: 'your_nonce', });     ","version":null,"tagName":"h3"},{"title":"signOut​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#signout","content":" signature: (emailOrUniqueId: string) =&gt; Promise&lt;null&gt;  Signs out the current user. On the web, you need to provide the id or email of the user. On Android and Apple, this parameter does not have any effect.  Returns a Promise that resolves with null or rejects in case of error.  await GoogleOneTapSignIn.signOut(user.id);     ","version":null,"tagName":"h3"},{"title":"requestAuthorization​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#requestauthorization","content":" ✨since v15.0.0  signature: (params: RequestAuthorizationParams) =&gt; Promise&lt;AuthorizationResponse&gt;  The underlying Android SDK separates authentication and authorization - that means that on Android you can request an access token and call Google APIs on behalf of the user without previously signing the user in.  This method is used to request extra authorization from the user. Use this on Android to obtain server-side access (offline access) to the user's data or for requesting an access token that has access to additional scopes.  Platform\tBehaviorAndroid\tPresents a modal that asks user for additional access to their Google account. Uses AuthorizationRequest.Builder. Apple\tCalls addScopes. The resulting accessToken has access to the requested scopes. Use this if you want to read more user metadata than just the basic info. Web\tNot implemented at the moment.  There are minor differences between the Android and Apple implementations stemming from the underlying Google SDKs. For example, Apple returns all granted scopes, while Android may only return the scopes that were requested.  UI screenshots Android\tiOS\t  ","version":null,"tagName":"h3"},{"title":"Automatic webClientId detection​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#automatic-webclientid-detection","content":" ✨since v15.2.0  This module can automatically detect the webClientId from Firebase's configuration file (does not work on Web where you need to provide it explicitly).  This is useful if you're using Firebase and want to avoid manually setting the webClientId in your code, especially if you have multiple environments (e.g. staging, production).  To use this feature:  Add WEB_CLIENT_ID entry to the GoogleService-Info.plist file.  On Android, the google-services.json file already contains the web client ID information. Unfortunately, it's not the case on iOS, so we need to add it ourselves.  Open the GoogleService-Info.plist in your favorite text editor and add the following:  &lt;key&gt;WEB_CLIENT_ID&lt;/key&gt; &lt;string&gt;your-web-client-id.apps.googleusercontent.com&lt;/string&gt;   pass &quot;autoDetect&quot; as the webClientId parameter.  tip On iOS, iosClientId can also be detected automatically - simply do not pass any iosClientId value. The reason webClientId is a required parameter is API uniformity across all platforms.    ","version":null,"tagName":"h2"},{"title":"Web support​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#web-support","content":" Providing a unified API across all platforms is a bit more tricky than it may seem. The web experience is different from the mobile one, and so are the underlying APIs.  On the web, the GoogleOneTapSignIn sign in functions are not Promise-based but callback-based as seen below. That means they return void and you need to provide callbacks for success and error handling.  Still, the parameter and result types are the same as for native, allowing to reuse the logic for both success and error handling across all platforms.  note The implementation has been migrated to FedCM though you can disable this via use_fedcm_for_prompt parameter.  To implement web support, follow these steps:  Call GoogleOneTapSignIn.signIn upon page load. This attempts to present the One-tap UI. It also sets up a listener for authentication events and calls the onSuccess callback when the user signs in (either with the One-tap flow or the Sign-In button).  If you do not want to present the one-tap UI, pass skipPrompt: true in the OneTapSignInParams object. This only sets up the listener for authentication events, and then relies on the user signing in via the WebGoogleSigninButton.  warning You should display the One Tap UI on page load or other window events, instead of it being displayed by a user action (e.g. a button press). Otherwise, you may get a broken UX. Users may not see any UI after a user action, due to globally opt-out, cool-down, or no Google session.  useEffect(() =&gt; { GoogleOneTapSignIn.configure({ webClientId, iosClientId: config.iosClientId, }); if (Platform.OS === 'web') { GoogleOneTapSignIn.signIn( { ux_mode: 'popup', }, { onResponse: (response) =&gt; { if (response.type === 'success') { console.log(response.data); } }, onError: (error) =&gt; { // handle error }, momentListener: (moment) =&gt; { console.log('moment', moment); }, }, ); } }, []);   Optionally, you can provide a momentListener callback function. The callback is called when important events take place. See reference.  Render the WebGoogleSigninButton component  One-tap UI may not always be available: This happens if you disable it (skipPrompt), when user has opted out or when they cancel the prompt several times in a row, entering the cooldown period.  WebGoogleSigninButton serves as a fallback. Tapping it opens the regular Google Sign-In dialog (or redirect, based on ux_mode param). When user signs in, the onResponse callback is called.  info The reason the GoogleOneTapSignIn.signIn api is callback-based rather than promise-based is that it's possible to get into an &quot;error&quot; state (when one-tap is not available) and later get a successful sign in from the button flow. Because of how the Google Sign In for Web SDK is done, modeling this with a promise-based api is not possible. ","version":null,"tagName":"h2"},{"title":"iOS setup guide","type":0,"sectionRef":"#","url":"/docs/setting-up/ios","content":"","keywords":"","version":null},{"title":"Link the native module​","type":1,"pageTitle":"iOS setup guide","url":"/docs/setting-up/ios#link-the-native-module","content":" run pod install in ios/ directory to install the module  ","version":null,"tagName":"h3"},{"title":"Google project configuration​","type":1,"pageTitle":"iOS setup guide","url":"/docs/setting-up/ios#google-project-configuration","content":" Follow this guide to get the configuration information which you need for the next steps.  ","version":null,"tagName":"h3"},{"title":"Xcode configuration​","type":1,"pageTitle":"iOS setup guide","url":"/docs/setting-up/ios#xcode-configuration","content":" Configure URL types in the Info panel (see screenshot) add a URL with scheme set to your REVERSED_CLIENT_ID (found inside GoogleService-Info.plist or Google Cloud console) If you need to support Mac Catalyst, you will need to enable the Keychain Sharing capability on each build target. No keychain groups need to be added.    ","version":null,"tagName":"h3"},{"title":"Optional: modify your app to respond to the URL scheme​","type":1,"pageTitle":"iOS setup guide","url":"/docs/setting-up/ios#optional-modify-your-app-to-respond-to-the-url-scheme","content":" This is only required if you have multiple listeners for openURL - for instance if you have both Google and Facebook OAuth (as seen in the code snippet below).  Because only one openURL method can be defined, if you have multiple listeners for openURL, you must combine them into a single function in your AppDelegate.m like so:  Open AppDelegate.mAdd an import: #import &lt;GoogleSignIn/GoogleSignIn.h&gt;Add a method to respond to the URL scheme. This is just an example of a method that you can add at the bottom of your file if you're using both FBSDKApplicationDelegate and GIDSignIn :  // AppDelegate.m - (BOOL)application:(UIApplication *)application openURL:(nonnull NSURL *)url options:(nonnull NSDictionary&lt;NSString *,id&gt; *)options { return [[FBSDKApplicationDelegate sharedInstance] application:application openURL:url options:options] || [GIDSignIn.sharedInstance handleURL:url]; }  ","version":null,"tagName":"h3"},{"title":"Web setup guide","type":0,"sectionRef":"#","url":"/docs/setting-up/web","content":"Web setup guide On the web, there is one extra step necessary to use the library: you need to load the Google Client Library and make it available in the browser before calling any of the APIs exposed by this package. tip Web support is only available to sponsors️. It takes just a few clicks to get access ❤️. There are different ways to load the client script. Some of them are: Next.jsSimple htmluseEffect import Script from 'next/script'; &lt;Script src=&quot;https://accounts.google.com/gsi/client&quot; strategy=&quot;lazyOnload&quot; onLoad={() =&gt; { // present the one-tap popup }} /&gt;; After the script is loaded, you can call the functions for signing in and render the WebGoogleSigninButton. If you call any of the One-tap functions before the client library is loaded, such calls trigger the onError callback with the PLAY_SERVICES_NOT_AVAILABLE error code. You can read the official docs for loading the Client Library here.","keywords":"","version":null},{"title":"FAQ / Troubleshooting","type":0,"sectionRef":"#","url":"/docs/troubleshooting","content":"","keywords":"","version":null},{"title":"Android​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#android","content":" ","version":null,"tagName":"h2"},{"title":"\"A non-recoverable sign in failure occurred\"​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#a-non-recoverable-sign-in-failure-occurred","content":" See this comment. Or this SO question.  ","version":null,"tagName":"h3"},{"title":"Login does not work when downloading from the Play Store.​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#login-does-not-work-when-downloading-from-the-play-store","content":" See the next paragraph.  ","version":null,"tagName":"h3"},{"title":"DEVELOPER_ERROR or code: 10 or Developer console is not set up correctly error message​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#developer_error","content":" This is always (always!) a configuration mismatch between your app and Google's servers. The problem is on your app's side.  Follow these pointers:  Search the issue tracker for old reports of the errorMake sure that your SHA certificate fingerprints and package name you entered in Firebase / Google Cloud Console are correct. If you are in development, make sure your development signing fingerprint is added as well.Follow the setup guide and perform its steps once again.If you're passing webClientId in configuration object to GoogleSignin.configure() make sure it's correct and that it is of type web (NOT Android!). You can get your webClientId from Google Developer Console. It is listed under &quot;OAuth 2.0 client IDs&quot;.  ","version":null,"tagName":"h3"},{"title":"Login does not work when using Internal App Sharing.​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#login-does-not-work-when-using-internal-app-sharing","content":" If you get a DEVELOPER_ERROR when using Internal App Sharing, it is because Google resigns your application with its own key.  See the previous paragraph.  ","version":null,"tagName":"h3"},{"title":"Changing Google Play Services version​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#changing-google-play-services-version","content":" See &quot;Choose Dependency versions&quot; above.  ","version":null,"tagName":"h3"},{"title":"Missing api_key/current_key object​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#missing-api_keycurrent_key-object","content":" open android/app/google-services.json and replace &quot;api_key&quot;:[] with &quot;api_key&quot;:[{ &quot;current_key&quot;: &quot;&quot; }]  ","version":null,"tagName":"h3"},{"title":"Package name !== application id​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#package-name--application-id","content":" When adding a new oauth client, google asks you to add your package name. In some cases your package name is not equal to your application id. Check if your package name in the AndroidManifest.xml is the same as your application/bundle id. Find your application id in the play console or android/app/build.gradle. The format looks like com.yourapp.id.  ","version":null,"tagName":"h3"},{"title":"iOS​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#ios","content":" ","version":null,"tagName":"h2"},{"title":"On iOS the app crashes when tapping Sign In button​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#on-ios-the-app-crashes-when-tapping-sign-in-button","content":" Along with &quot;Your app is missing support for the following URL schemes&quot; error in console.  Your Url Schemes configuration is incorrect.  If you use Expo, make sure that the config plugin is configured correctly.  In vanilla React Native projects, add URL type like this:  ","version":null,"tagName":"h3"}],"options":{"disableVersioning":true,"excludeRoutes":["/docs/license"],"id":"default"}}