"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[403],{5745:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var s=i(5893),o=i(1151);const t={sidebar_position:90,sidebar_label:"Migrating"},r="Migrating to new JS API",a={id:"migrating",title:"Migrating to new JS API",description:"One-tap sign in module",source:"@site/docs/migrating.md",sourceDirName:".",slug:"/migrating",permalink:"/docs/migrating",draft:!1,unlisted:!1,editUrl:"https://github.com/react-native-google-signin/docs/edit/main/docs/migrating.md",tags:[],version:"current",sidebarPosition:90,frontMatter:{sidebar_position:90,sidebar_label:"Migrating"},sidebar:"tutorialSidebar",previous:{title:"License",permalink:"/docs/license"},next:{title:"Other libraries",permalink:"/docs/other-libs"}},d={},c=[{value:"One-tap sign in module",id:"one-tap-sign-in-module",level:2},{value:"Original Sign In",id:"original-sign-in",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"migrating-to-new-js-api",children:"Migrating to new JS API"})}),"\n",(0,s.jsx)(n.h2,{id:"one-tap-sign-in-module",children:"One-tap sign in module"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add the ",(0,s.jsx)(n.a,{href:"one-tap#configure",children:(0,s.jsx)(n.code,{children:"configure"})})," method to your code. This method is required to be called to configure the module."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Change the ",(0,s.jsx)(n.code,{children:"signIn"}),", ",(0,s.jsx)(n.code,{children:"createAccount"}),", ",(0,s.jsx)(n.code,{children:"presentExplicitSignIn"}),", and ",(0,s.jsx)(n.code,{children:"requestAuthorization"})," methods to use the new apis built on ",(0,s.jsx)(n.a,{href:"/docs/api#onetapresponse",children:(0,s.jsx)(n.code,{children:"OneTapResponse"})}),":"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"const signIn = async () => {\n  try {\n-    const userInfo = await GoogleOneTapSignIn.signIn({\n-      webClientId: `autoDetect`, // works only if you use Firebase\n-      iosClientId: config.iosClientId, // only needed if you're not using Firebase\n-    });\n-    setState({ userInfo });\n+    const response = await GoogleOneTapSignIn.signIn();\n+\n+    if (response.type === 'success') {\n+      setState({ userInfo: response.data });\n+    } else if (response.type === 'noSavedCredentialFound') {\n+      // Android and Apple only. No saved credential found, call `createAccount`\n+    }\n\n  } catch (error) {\n    if (isErrorWithCode(error)) {\n      switch (error.code) {\n-        case statusCodes.NO_SAVED_CREDENTIAL_FOUND:\n-          // Android and Apple only. No saved credential found, call `createAccount`\n-          break;\n-        case statusCodes.SIGN_IN_CANCELLED:\n-          // sign in was cancelled\n-          break;\n        case statusCodes.ONE_TAP_START_FAILED:\n          // Android-only, you probably have hit rate limiting.\n          // On Android, you can still call `presentExplicitSignIn` in this case.\n          break;\n        case statusCodes.PLAY_SERVICES_NOT_AVAILABLE:\n          // Android-only: play services not available or outdated\n          // Web: when calling an unimplemented api (requestAuthorization)\n          break;\n        default:\n        // something else happened\n      }\n    } else {\n      // an error that's not related to google sign in occurred\n    }\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["If requesting offline access in ",(0,s.jsx)(n.code,{children:"requestAuthorization"})," on Android, add ",(0,s.jsx)(n.code,{children:"enabled: true"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"await GoogleOneTapSignIn.requestAuthorization({\n  offlineAccess: {\n+      enabled: true,\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"original-sign-in",children:"Original Sign In"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Follow step 2. from above for ",(0,s.jsx)(n.code,{children:"signIn"}),", ",(0,s.jsx)(n.code,{children:"addScopes"})," and ",(0,s.jsx)(n.code,{children:"signInSilently"})," methods."]}),"\n",(0,s.jsxs)(n.li,{children:["remove ",(0,s.jsx)(n.code,{children:"SIGN_IN_REQUIRED"})," mentions. This case is now handled with ",(0,s.jsx)(n.a,{href:"api#nosavedcredentialfound",children:(0,s.jsx)(n.code,{children:"NoSavedCredentialFound"})})," object:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"const getCurrentUserInfo = async () => {\n  try {\n    const response = await GoogleSignin.signInSilently();\n+    if (isSuccessResponse(response)) {\n+        setState({ userInfo: response.data })\n+    } else if (isNoSavedCredentialFoundResponse(response)) {\n+        // user has not signed in yet\n+    }\n-    setState({ userInfo: response });\n  } catch (error) {\n-    if (error.code === statusCodes.SIGN_IN_REQUIRED) {\n-      // user has not signed in yet\n-    } else {\n-      // some other error\n-    }\n  }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>r});var s=i(7294);const o={},t=s.createContext(o);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);