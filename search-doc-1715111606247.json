{"searchDocs":[{"title":"WebGoogleSigninButton","type":0,"sectionRef":"#","url":"/docs/buttons/web","content":"","keywords":"","version":null},{"title":"How to use this​","type":1,"pageTitle":"WebGoogleSigninButton","url":"/docs/buttons/web#how-to-use-this","content":" As the One-tap Guide explains, there are two ways to sign in on the Web: using the One-tap UI or using the Google Sign-In button.  One-tap UI may not always be available: This happens if user has opted out or when they close the dialog several times in a row, entering the cooldown period.  The Google Sign-In button serves as a fallback. Tapping it will open the regular Google Sign-In dialog.  import { WebGoogleSigninButton } from '@react-native-google-signin/google-signin'; &lt;WebGoogleSigninButton /&gt;;   ","version":null,"tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"WebGoogleSigninButton","url":"/docs/buttons/web#props","content":" All props are optional.  Name\tType\tDescriptiontype?\t&quot;standard&quot; | &quot;icon&quot;\tOptional. The type of the sign-in button. theme?\t&quot;outline&quot; | &quot;filled_blue&quot; | &quot;filled_black&quot;\tOptional. The theme of the sign-in button. size?\t&quot;large&quot; | &quot;medium&quot; | &quot;small&quot;\tOptional. The size of the sign-in button. text?\t&quot;signin_with&quot; | &quot;signup_with&quot; | &quot;continue_with&quot; | &quot;signin&quot;\tOptional. The text to display on the sign-in button. shape?\t&quot;rectangular&quot; | &quot;pill&quot; | &quot;circle&quot; | &quot;square&quot;\tOptional. The shape of the sign-in button. width?\tnumber\tOptional. The width of the sign-in button. locale?\tstring\tOptional. The locale for the sign-in button. logoAlignment?\t&quot;left&quot; | &quot;center&quot;\tOptional. The alignment of the logo on the button. onError?\t(error: Error) =&gt; void\tOptional. Called when you try to render the button before the Client SDK is loaded. ","version":null,"tagName":"h2"},{"title":"GoogleSigninButton","type":0,"sectionRef":"#","url":"/docs/buttons/native","content":"","keywords":"","version":null},{"title":"Props​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#props","content":" ","version":null,"tagName":"h2"},{"title":"size​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#size","content":" Possible values:  Size.Icon: display only Google icon. Recommended size of 48 x 48.Size.Standard: icon with 'Sign in'. Recommended size of 230 x 48.Size.Wide: icon with 'Sign in with Google'. Recommended size of 312 x 48.  Default: GoogleSigninButton.Size.Standard. Given the size prop you pass, we'll automatically apply the recommended size, but you can override it by passing the style prop as in style={{ width, height }}.  ","version":null,"tagName":"h3"},{"title":"color​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#color","content":" Possible values:  Color.Dark: apply a blue backgroundColor.Light: apply a light gray background  ","version":null,"tagName":"h3"},{"title":"disabled​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#disabled","content":" Boolean. If true, all interactions for the button are disabled.  ","version":null,"tagName":"h3"},{"title":"onPress​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#onpress","content":" Handler to be called when the user taps the button  ","version":null,"tagName":"h3"},{"title":"Inherited View props...​","type":1,"pageTitle":"GoogleSigninButton","url":"/docs/buttons/native#inherited-view-props","content":"","version":null,"tagName":"h3"},{"title":"Error handling","type":0,"sectionRef":"#","url":"/docs/errors","content":"","keywords":"","version":null},{"title":"Jest module mock","type":0,"sectionRef":"#","url":"/docs/jest-mock","content":"Jest module mock If you use Jest for testing, you may need to mock the functionality of the native module. This library ships with a Jest mock that you can add to the setupFiles array in the Jest config. By default, the mock behaves as if the calls were successful and returns mock user data. &quot;setupFiles&quot;: [ &quot;./node_modules/@react-native-google-signin/google-signin/jest/build/setup.js&quot; ], ","keywords":"","version":null},{"title":"isErrorWithCode(value)​","type":1,"pageTitle":"Error handling","url":"/docs/errors#iserrorwithcodevalue","content":" TypeScript helper to check if the passed parameter is an instance of Error which has the code property. All errors thrown by this library have the code property, which contains a value from statusCodes or some other string for the less-usual errors.  isErrorWithCode can be used to avoid as casting when you want to access the code property on errors returned by the module.  tip This functionality is only available to sponsors️. It takes just a few clicks to get access ❤️.  import { isErrorWithCode, GoogleSignin } from '@react-native-google-signin/google-signin'; try { const userInfo = await GoogleSignin.signIn(); // do something with userInfo } catch (error) { if (isErrorWithCode(error)) { // here you can safely read `error.code` and TypeScript will know that it has a value } else { // this error does not have a `code`, and does not come from the Google Sign in module } }   ","version":null,"tagName":"h3"},{"title":"Status Codes​","type":1,"pageTitle":"Error handling","url":"/docs/errors#status-codes","content":" import { statusCodes } from '@react-native-google-signin/google-signin';   Status codes are useful when determining which kind of error has occurred during the sign-in process. Under the hood, these constants are derived from native GoogleSignIn error codes and are platform-specific. Always compare error.code to statusCodes.* and do not rely on the raw value of error.code.  See example usage.  Name\tDescriptionSIGN_IN_CANCELLED\tWhen user cancels the sign in flow IN_PROGRESS\tTrying to invoke another operation (e.g. signInSilently) when previous one has not yet finished. If you call e.g. signInSilently twice, 2 calls to signInSilently in the native module will be done. The promise from the first call to signInSilently will be rejected with this error, and the second will resolve / reject with the result of the native module. SIGN_IN_REQUIRED\tUseful for use with signInSilently() - no user has signed in yet. This error does not happen with one-tap sign in (instead see NO_SAVED_CREDENTIAL_FOUND). PLAY_SERVICES_NOT_AVAILABLE\tPlay services are not available or outdated. This happens on Android, or on the Web when you're calling the exposed APIs before the Client library is loaded.  ","version":null,"tagName":"h3"},{"title":"Status codes specific to One-tap sign in​","type":1,"pageTitle":"Error handling","url":"/docs/errors#status-codes-specific-to-one-tap-sign-in","content":" Name\tDescriptionONE_TAP_START_FAILED\tThrown when the One-tap sign in UI cannot be presented. This would typically happen during the cooldown period. You can still call the original Google Sign In API in this case. NO_SAVED_CREDENTIAL_FOUND\tThrown when no user signed in to your app yet. To recover from this error, proceed to calling createAccount.  See example usage. ","version":null,"tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/install","content":"","keywords":"","version":null},{"title":"Sponsor-Only Version​","type":1,"pageTitle":"Installation","url":"/docs/install#sponsor-only-version","content":" Available exclusively to GitHub sponsors, this version offers:  ✅ One-tap sign-in support for Android and Web, fully compatible (same API) with iOS  ✅ Support for the React Native New Architecture, including the bridgeless mode.  ✅ Enhanced API functionalities: synchronous methods and more, plus minor bugfixes.  ✅ Comprehensive documentation available on this site.  Your sponsorship enables continued maintenance and development of the module. Thank you for supporting this project! ❤️  ","version":null,"tagName":"h3"},{"title":"Public Version​","type":1,"pageTitle":"Installation","url":"/docs/install#public-version","content":" Available on the public npm registry, this version does not include the features, updates and bugfixes found in the sponsor-only version.  Please note that this documentation site covers the sponsor-only version. If you're using the public version, please refer to this readme.  ","version":null,"tagName":"h3"},{"title":"Accessing the private package for sponsors​","type":1,"pageTitle":"Installation","url":"/docs/install#accessing-the-private-package-for-sponsors","content":" Upon sponsoring (please use specifically the tiers that mention this project!), you will get immediate access * to the private package and to the private repo with the sources and examples.  Three steps are needed to access the sponsored package, which is hosted on GitHub npm packages registry.  Become a sponsor and accept private repository invitation * - it takes just a few clicks. Obtain here a Personal Access Token with packages:read permission. Set up your package manager so that it fetches the package from the GH packages registry. In this example, we're using an NPM_TOKEN_GOOGLE_SIGN_IN environment variable.    npm / yarn v1yarn v3+ create a .npmrc file in your project root with the following content: //npm.pkg.github.com/:_authToken=${NPM_TOKEN_GOOGLE_SIGN_IN} @react-native-google-signin:registry=https://npm.pkg.github.com/   If you use another package manager (such as bun), please refer to its documentation on how to set up a custom registry.  ","version":null,"tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"/docs/install#requirements","content":" The package requires React Native 0.60 or higher.  If you're using the New Architecture, you need to be on React Native 0.72 or higher.  ","version":null,"tagName":"h2"},{"title":"Installing​","type":1,"pageTitle":"Installation","url":"/docs/install#installing","content":" yarn add @react-native-google-signin/google-signin   There are several guides to follow now:  Expo guide for native mobile apps built with ExpoWeb guide if you want to use the package on the WebIf you're not using Expo but plain React Native, follow Android guide and iOS guide    Invitation Note​  As a sponsor, you will be added automatically if you sponsor from a personal account. If you sponsor from an organization account, please let me know and I'll add you manually. This is because of how GitHub handles this case. ","version":null,"tagName":"h2"},{"title":"Other libraries","type":0,"sectionRef":"#","url":"/docs/other-libs","content":"","keywords":"","version":null},{"title":"react-native-theme-control​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-native-theme-control","content":" Natively control react native application theme at runtime and persist it for the next app start.  ","version":null,"tagName":"h3"},{"title":"react-navigation-header-buttons​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-navigation-header-buttons","content":" Easily render header buttons for react-navigation.  ","version":null,"tagName":"h3"},{"title":"react-to-imperative​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-to-imperative","content":" Convert React (Native) components for imperative use.  ","version":null,"tagName":"h3"},{"title":"react-native-datetimepicker​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-native-datetimepicker","content":" React Native date &amp; time picker component for iOS and Android.  ","version":null,"tagName":"h3"},{"title":"JS-lingui​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#js-lingui","content":" A readable, automated, and optimized internationalization for JavaScript.  ","version":null,"tagName":"h3"},{"title":"react-native-document-picker​","type":1,"pageTitle":"Other libraries","url":"/docs/other-libs#react-native-document-picker","content":" Document Picker for React Native. ","version":null,"tagName":"h3"},{"title":"Module API","type":0,"sectionRef":"#","url":"/docs/api","content":"","keywords":"","version":null},{"title":"Constants​","type":1,"pageTitle":"Module API","url":"/docs/api#constants","content":" ","version":null,"tagName":"h2"},{"title":"statusCodes​","type":1,"pageTitle":"Module API","url":"/docs/api#statuscodes","content":" Read more about the status codes here.  • Const statusCodes: Readonly&lt;{ IN_PROGRESS: string ; NO_SAVED_CREDENTIAL_FOUND: string ; ONE_TAP_START_FAILED: string ; PLAY_SERVICES_NOT_AVAILABLE: string ; SIGN_IN_CANCELLED: string ; SIGN_IN_REQUIRED: string }&gt;  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Module API","url":"/docs/api#functions","content":" ","version":null,"tagName":"h2"},{"title":"isErrorWithCode​","type":1,"pageTitle":"Module API","url":"/docs/api#iserrorwithcode","content":" ▸ isErrorWithCode(error): error is NativeModuleError  TypeScript helper to check if an object has the code property. This is used to avoid as casting when you access the code property on errors returned by the module.  Parameters​  Name\tTypeerror\tany  Returns​  error is NativeModuleError  ","version":null,"tagName":"h3"},{"title":"One-tap sign in module​","type":1,"pageTitle":"Module API","url":"/docs/api#one-tap-sign-in-module","content":" ","version":null,"tagName":"h2"},{"title":"OneTapSignInParams​","type":1,"pageTitle":"Module API","url":"/docs/api#onetapsigninparams","content":" Ƭ OneTapSignInParams: Object  Name\tType\tDescriptionwebClientId\tstring\tThe web client ID obtained from Google Cloud console. iosClientId?\tstring\tThe iOS client ID obtained from Google Cloud console. Provide this if you're not using the config file from Firebase. nonce?\tstring\tOptional. random string used by the ID token to prevent replay attacks. autoSignIn?\tboolean\tOptional. If true, enables auto sign-in. filterByAuthorizedAccounts?\tboolean\tOptional. Filters by authorized accounts.  The following are available on the Web. Read the value descriptions here.  Name\tType\tDescriptionlogin_uri?\tstring native_callback?\t() =&gt; void cancel_on_tap_outside?\tboolean prompt_parent_id?\tstring context?\t&quot;signin&quot; | &quot;signup&quot; | &quot;use&quot; state_cookie_domain?\tstring ux_mode?\t&quot;popup&quot; | &quot;redirect&quot; allowed_parent_origin?\tstring | string[] intermediate_iframe_close_callback?\t() =&gt; void itp_support?\tboolean log_level?\t&quot;debug&quot; | &quot;info&quot; | &quot;warn&quot;\t    ","version":null,"tagName":"h3"},{"title":"OneTapUser​","type":1,"pageTitle":"Module API","url":"/docs/api#onetapuser","content":" Ƭ OneTapUser: Object  Name\tType\tDescriptionuser The signed-in user object. user.id\tstring\tThe unique identifier of the user. user.email\tstring | null\tThe email of the user, if available. user.name\tstring | null\tThe full name of the user, if available. user.givenName\tstring | null\tThe given name (first name) of the user, if available. user.familyName\tstring | null\tThe family name (last name) of the user, if available. user.photo\tstring | null\tThe URL to the user's photo, if available. idToken\tstring\tThe ID token for the user. credentialOrigin\t&quot;auto&quot; | &quot;user&quot; | &quot;user_1tap&quot; | &quot;user_2tap&quot; | &quot;btn&quot; | &quot;btn_confirm&quot; | &quot;btn_add_session&quot; | &quot;btn_confirm_add_session&quot;\tThe origin of the credential selection. Always 'user' in native apps.    ","version":null,"tagName":"h3"},{"title":"GoogleOneTapSignIn​","type":1,"pageTitle":"Module API","url":"/docs/api#googleonetapsignin","content":" • Const GoogleOneTapSignIn: Object  The entry point of the One-tap Sign In API, exposed as GoogleOneTapSignIn. On Android, this module uses the Android Credential Manager under the hood.  On the web, don't call signIn / createAccount and use the WebGoogleOneTapSignIn.signIn instead. The signOut method is available on all platforms.  Type declaration​  Name\tTypesignIn\t(params: OneTapSignInParams) =&gt; Promise&lt;OneTapUser&gt; presentExplicitSignIn\t(params: OneTapSignInParams) =&gt; Promise&lt;OneTapUser&gt; createAccount\t(params: OneTapSignInParams) =&gt; Promise&lt;OneTapUser&gt; signOut\t(emailOrUniqueId: string) =&gt; Promise&lt;null&gt;    ","version":null,"tagName":"h3"},{"title":"Web One-tap sign in module​","type":1,"pageTitle":"Module API","url":"/docs/api#web-one-tap-sign-in-module","content":" This is a wrapper for the Sign In with Google for Web, supporting both the One-tap flow and the Google Sign-In button.  ","version":null,"tagName":"h2"},{"title":"WebGoogleOneTapSignIn​","type":1,"pageTitle":"Module API","url":"/docs/api#webgoogleonetapsignin","content":" • Const WebGoogleOneTapSignIn: Object  On the web, call WebGoogleOneTapSignIn.signIn on page load or other window events, not as a response to a user interaction.  That sets up a listener for authentication events and calls the appropriate callbacks.  On other platforms, it calls the onError callback with a SIGN_IN_CANCELLED error.  Type declaration​  Name\tTypesignIn\t(params: OneTapSignInParams, callbacks: WebOneTapSignInCallbacks) =&gt; void  ","version":null,"tagName":"h3"},{"title":"WebOneTapSignInCallbacks​","type":1,"pageTitle":"Module API","url":"/docs/api#webonetapsignincallbacks","content":" Ƭ WebOneTapSignInCallbacks: Object  Type declaration​  Name\tType\tDescriptionmomentListener?\tMomentListener\tA callback function that is called when important events take place. See reference. onError\t(error: NativeModuleError) =&gt; void | Promise&lt;void&gt;\tCalled when the user cancels the sign-in flow, or when an error occurs. You can use the code property of the error to determine the reason for the error. The reported errors on the web are in the same format as the errors reported on the native platforms, so you can reuse your error handling code. onSuccess\t(userInfo: OneTapUser) =&gt; void | Promise&lt;void&gt;\tCalled when the user successfully signs in, either using the One-tap flow or the button flow.    ","version":null,"tagName":"h3"},{"title":"Original Google sign in​","type":1,"pageTitle":"Module API","url":"/docs/api#original-google-sign-in","content":" ","version":null,"tagName":"h2"},{"title":"AddScopesParams​","type":1,"pageTitle":"Module API","url":"/docs/api#addscopesparams","content":" Ƭ AddScopesParams: Object  Type declaration​  Name\tType\tDescriptionscopes\tstring[]\tThe Google API scopes to request access to. Default is email and profile.    ","version":null,"tagName":"h3"},{"title":"ConfigureParams​","type":1,"pageTitle":"Module API","url":"/docs/api#configureparams","content":" Ƭ ConfigureParams: Object  Type declaration​  Name\tType\tDescriptionwebClientId?\tstring\tWeb client ID from Developer Console. Required to get the idToken on the user object, and for offline access. accountName?\tstring\tANDROID ONLY. An account name that should be prioritized. forceCodeForRefreshToken?\tboolean\tANDROID ONLY. If true, the granted server auth code can be exchanged for an access token and a refresh token. hostedDomain?\tstring\tSpecifies a hosted domain restriction offlineAccess?\tboolean\tMust be true if you wish to access user APIs on behalf of the user from your own server openIdRealm?\tstring\tiOS ONLY The OpenID2 realm of the home web server. This allows Google to include the user's OpenID Identifier in the OpenID Connect ID token. profileImageSize?\tnumber\tiOS ONLY The desired height (and width) of the profile image. Defaults to 120px scopes?\tstring[]\tThe Google API scopes to request access to. Default is email and profile. googleServicePlistPath?\tstring\tIf you want to specify a different bundle path name for the GoogleService-Info, e.g. 'GoogleService-Info-Staging'. Mutualy exclusive with iosClientId iosClientId?\tstring\tIf you want to specify the client ID of type iOS. Mutualy exclusive with googleServicePlistPath.    ","version":null,"tagName":"h3"},{"title":"GetTokensResponse​","type":1,"pageTitle":"Module API","url":"/docs/api#gettokensresponse","content":" Ƭ GetTokensResponse: Object  Type declaration​  Name\tTypeaccessToken\tstring idToken\tstring    ","version":null,"tagName":"h3"},{"title":"HasPlayServicesParams​","type":1,"pageTitle":"Module API","url":"/docs/api#hasplayservicesparams","content":" Ƭ HasPlayServicesParams: Object  Type declaration​  Name\tType\tDescriptionshowPlayServicesUpdateDialog\tboolean\tOptional. Whether to show a dialog that promps the user to install Google Play Services, if they don't have them installed    ","version":null,"tagName":"h3"},{"title":"SignInParams​","type":1,"pageTitle":"Module API","url":"/docs/api#signinparams","content":" Ƭ SignInParams: Object  Type declaration​  Name\tType\tDescriptionloginHint?\tstring\tiOS only. The user's ID, or email address, to be prefilled in the authentication UI if possible. See docs here    ","version":null,"tagName":"h3"},{"title":"User​","type":1,"pageTitle":"Module API","url":"/docs/api#user","content":" Ƭ User: Object  Type declaration​  Name\tType\tDescriptionidToken\tstring | null\tJWT (JSON Web Token) that serves as a secure credential for your user's identity. scopes\tstring[]\t- serverAuthCode\tstring | null\tNot null only if a valid webClientId and offlineAccess: true was specified in configure(). user\t{ email: string ; familyName: string | null ; givenName: string | null ; id: string ; name: string | null ; photo: string | null }\t- user.email\tstring\t- user.familyName\tstring | null\t- user.givenName\tstring | null\t- user.id\tstring\t- user.name\tstring | null\t- user.photo\tstring | null\t-    ","version":null,"tagName":"h3"},{"title":"GoogleSignin​","type":1,"pageTitle":"Module API","url":"/docs/api#googlesignin","content":" • Const GoogleSignin: Object  The entry point of the Google Sign In API, exposed as GoogleSignin.  Type declaration​  Name\tTypeaddScopes\t(options: AddScopesParams) =&gt; Promise&lt;User | null&gt; clearCachedAccessToken\t(tokenString: string) =&gt; Promise&lt;null&gt; configure\t(options: ConfigureParams) =&gt; void getCurrentUser\t() =&gt; User | null getTokens\t() =&gt; Promise&lt;GetTokensResponse&gt; hasPlayServices\t(options: HasPlayServicesParams) =&gt; Promise&lt;boolean&gt; hasPreviousSignIn\t() =&gt; boolean revokeAccess\t() =&gt; Promise&lt;null&gt; signIn\t(options: SignInParams) =&gt; Promise&lt;User&gt; signInSilently\t() =&gt; Promise&lt;User&gt; signOut\t() =&gt; Promise&lt;null&gt;  ","version":null,"tagName":"h3"},{"title":"React Components​","type":1,"pageTitle":"Module API","url":"/docs/api#react-components","content":" • GoogleSigninButton: Object  ","version":null,"tagName":"h2"},{"title":"GoogleSigninButtonProps​","type":1,"pageTitle":"Module API","url":"/docs/api#googlesigninbuttonprops","content":" Ƭ GoogleSigninButtonProps: Object  Type declaration​  Also inherits ViewProps.  Name\tTypecolor?\t&quot;dark&quot; | &quot;light&quot; disabled?\tboolean onPress?\t() =&gt; void size?\tnumber    ","version":null,"tagName":"h3"},{"title":"WebGoogleSignInButtonProps​","type":1,"pageTitle":"Module API","url":"/docs/api#webgooglesigninbuttonprops","content":" Ƭ WebGoogleSignInButtonProps: Object  Name\tType\tDescriptiontype?\t&quot;standard&quot; | &quot;icon&quot;\tOptional. The type of the sign-in button. theme?\t&quot;outline&quot; | &quot;filled_blue&quot; | &quot;filled_black&quot;\tOptional. The theme of the sign-in button. size?\t&quot;large&quot; | &quot;medium&quot; | &quot;small&quot;\tOptional. The size of the sign-in button. text?\t&quot;signin_with&quot; | &quot;signup_with&quot; | &quot;continue_with&quot; | &quot;signin&quot;\tOptional. The text to display on the sign-in button. shape?\t&quot;rectangular&quot; | &quot;pill&quot; | &quot;circle&quot; | &quot;square&quot;\tOptional. The shape of the sign-in button. width?\tnumber\tOptional. The width of the sign-in button. locale?\tstring\tOptional. The locale for the sign-in button. logoAlignment?\t&quot;left&quot; | &quot;center&quot;\tOptional. The alignment of the logo on the button.    ","version":null,"tagName":"h3"},{"title":"GoogleSigninButton​","type":1,"pageTitle":"Module API","url":"/docs/api#googlesigninbutton","content":" ▸ GoogleSigninButton(props): Element  Parameters​  Name\tTypeprops\tGoogleSigninButtonProps  Returns​  Element    ","version":null,"tagName":"h3"},{"title":"WebGoogleSigninButton​","type":1,"pageTitle":"Module API","url":"/docs/api#webgooglesigninbutton","content":" ▸ WebGoogleSigninButton(props): Element  Parameters​  Name\tTypeprops\tWebGoogleSignInButtonProps  Returns​  Element ","version":null,"tagName":"h3"},{"title":"Android setup guide","type":0,"sectionRef":"#","url":"/docs/setting-up/android","content":"","keywords":"","version":null},{"title":"Ensure compatibility​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#ensure-compatibility","content":" If you're using the sponsor package:  If you're using RN &gt;= 0.73, you're good to go.  But if you're using RN 0.72 or older, you need to either:  install version 12.1.0 of the packageor install version &gt;= 13 AND specify compileSdkVersion 34 in android/build.gradle of your project as highlighted below  ","version":null,"tagName":"h3"},{"title":"1. Google project configuration​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#1-google-project-configuration","content":" Follow this guide to set up your project and get the configuration information which you'll need later.  ","version":null,"tagName":"h2"},{"title":"Without Firebase​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#without-firebase","content":" You don't need to do any more modifications.  ","version":null,"tagName":"h3"},{"title":"With Firebase​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#with-firebase","content":" 1. Download the configuration file​  Download the configuration file (google-services.json) from Firebase into your project according to this guide.  2. Update gradle files​  Update android/build.gradle with  android/build.gradle buildscript { ext { buildToolsVersion = &quot;a.b.c&quot; minSdkVersion = x compileSdkVersion = y targetSdkVersion = z googlePlayServicesAuthVersion = &quot;20.7.0&quot; // &lt;--- use this version or newer } // ... dependencies { classpath 'com.google.gms:google-services:4.4.0' // &lt;--- use this version or newer } }   Update android/app/build.gradle with  android/app/build.gradle apply plugin: &quot;com.android.application&quot; apply plugin: &quot;org.jetbrains.kotlin.android&quot; apply plugin: &quot;com.facebook.react&quot; apply plugin: 'com.google.gms.google-services'   This ends the setup for Firebase.  ","version":null,"tagName":"h3"},{"title":"Choose Dependency versions (optional)​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#choose-dependency-versions-optional","content":" The library depends on com.google.android.gms:play-services-auth, as seen in build.gradle. If needed, you may control their versions by the ext closure, as seen in the code snippet above.  ","version":null,"tagName":"h2"},{"title":"Running on simulator or device​","type":1,"pageTitle":"Android setup guide","url":"/docs/setting-up/android#running-on-simulator-or-device","content":" Make sure you have an emulator / device with Google Play Services installed. ","version":null,"tagName":"h2"},{"title":"Original Google sign in","type":0,"sectionRef":"#","url":"/docs/original","content":"","keywords":"","version":null},{"title":"Obtaining configuration information","type":0,"sectionRef":"#","url":"/docs/setting-up/get-config-file","content":"","keywords":"","version":null},{"title":"Without Firebase​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#without-firebase","content":" ","version":null,"tagName":"h2"},{"title":"iOS​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#ios","content":" You need to obtain the ios client id and reversed client id.  Follow the instructions at &quot;Get an OAuth client ID&quot; and then &quot;Configure your application project&quot;.  ","version":null,"tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#android","content":" Follow the instructions at &quot;Configure a Google API Console project&quot;.  Please see more details here if needed. It's important that OAuth 2.0 android id has fingerprint set correspondingly to the fingerprint of certificate which is used to sign the apk. Also, package name should be the same as apk package name.  ","version":null,"tagName":"h3"},{"title":"WebClientId​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#webclientid","content":" When done configuring your project, take note of webClientId which you may need later. It can be found here. Make sure you select the correct project. webClientId should be under OAuth section.  ","version":null,"tagName":"h2"},{"title":"With Firebase​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#with-firebase","content":" If you don't already have a project in Firebase you need to create one in order to add credentials for your iOS and Android application.  Firebase console  ","version":null,"tagName":"h2"},{"title":"1. Add your iOS and Android App inside Project settings​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#1-add-your-ios-and-android-app-inside-project-settings","content":"   ","version":null,"tagName":"h3"},{"title":"2. Enter required information and download the config file​","type":1,"pageTitle":"Obtaining configuration information","url":"/docs/setting-up/get-config-file#2-enter-required-information-and-download-the-config-file","content":" Note: For Android, adding the SHA1 hash is an obligation  You can use your debug keystore's SHA1 hash, read this StackOverflow thread to obtain it. When running the keytool command, MAKE SURE you provide path to the correct keystore, you may have multiple keystores on your system! (eg in home directory, and also directly in the android/app folder). To see what keystore is being used to sign your app, go to android/app/build.gradle and look for storeFile entries.  If you don't have a keystore, you need to generate one. To generate your keystore follow this guide.  IMPORTANT if you have multiple keystores (and you likely do - eg. debug and release) you'll need to get the SHA1 hashes for all of them and save the hashes to Firebase! ","version":null,"tagName":"h3"},{"title":"configure​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#configure","content":" signature: (options: ConfigureParams) =&gt; void  It is mandatory to call this method before attempting to call signIn() and signInSilently(). This method is sync meaning you can call signIn / signInSilently right after it. In typical scenarios, configure needs to be called only once, after your app starts. In the native layer, this is a synchronous call. All parameters are optional.  Example usage with default options: you'll get user email and basic profile info.  import { GoogleSignin } from '@react-native-google-signin/google-signin'; GoogleSignin.configure();   An example with all options enumerated:  GoogleSignin.configure({ webClientId: '&lt;FROM DEVELOPER CONSOLE&gt;', // client ID of type WEB for your server. Required to get the `idToken` on the user object, and for offline access. scopes: ['https://www.googleapis.com/auth/drive.readonly'], // what API you want to access on behalf of the user, default is email and profile offlineAccess: true, // if you want to access Google API on behalf of the user FROM YOUR SERVER hostedDomain: '', // specifies a hosted domain restriction forceCodeForRefreshToken: true, // [Android] related to `serverAuthCode`, read the docs link below *. accountName: '', // [Android] specifies an account name on the device that should be used iosClientId: '&lt;FROM DEVELOPER CONSOLE&gt;', // [iOS] if you want to specify the client ID of type iOS (otherwise, it is taken from GoogleService-Info.plist) googleServicePlistPath: '', // [iOS] if you renamed your GoogleService-Info file, new name here, e.g. GoogleService-Info-Staging openIdRealm: '', // [iOS] The OpenID2 realm of the home web server. This allows Google to include the user's OpenID Identifier in the OpenID Connect ID token. profileImageSize: 120, // [iOS] The desired height (and width) of the profile image. Defaults to 120px });   * forceCodeForRefreshToken docs  ","version":null,"tagName":"h3"},{"title":"One-tap Google sign in","type":0,"sectionRef":"#","url":"/docs/one-tap","content":"","keywords":"","version":null},{"title":"signIn​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#signin","content":" signature: (params: OneTapSignInParams) =&gt; Promise&lt;OneTapUser&gt;  Attempts to sign in user automatically as explained here. On the web, this call rejects - please read below for web support.  Returns a Promise that resolves with an object containing the user data or rejects in case of error. If there is no user that previously signed in, the promise will reject with NO_SAVED_CREDENTIAL_FOUND error. In that case, you can call createAccount to start a flow to create a new account. You don't need to call signIn as a response to a user action - you can call it when your app starts or when suitable.  UI screenshot  import { GoogleOneTapSignIn, statusCodes, isErrorWithCode, GoogleSignin } from '@react-native-google-signin/google-signin'; // Somewhere in your code const signIn = async () =&gt; { try { await GoogleSignin.hasPlayServices(); const userInfo = await GoogleOneTapSignIn.signIn({ webClientId: config.webClientId, iosClientId: config.iosClientId, // only needed if you're not using the Firebase config file nonce: 'your_nonce', }); setState({ userInfo }); } catch (error) { if (isErrorWithCode(error)) { switch (error.code) { case statusCodes.NO_SAVED_CREDENTIAL_FOUND: // Android only. No saved credential found, try calling `createAccount` break; case statusCodes.SIGN_IN_CANCELLED: // sign in was cancelled break; case statusCodes.ONE_TAP_START_FAILED: // Android and Web only, you probably have hit rate limiting. // On Android, you can still call `presentExplicitSignIn` in this case. // On the web, user needs to click the `WebGoogleSigninButton` to sign in. break; case statusCodes.PLAY_SERVICES_NOT_AVAILABLE: // Android-only: play services not available or outdated break; default: // something else happened } } else { // an error that's not related to google sign in occurred } } };   ","version":null,"tagName":"h3"},{"title":"createAccount​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#createaccount","content":" signature: (params: OneTapSignInParams) =&gt; Promise&lt;OneTapUser&gt;  Starts a flow to sign in with your app for the first time (to create a user account). It offers a list of user accounts to choose from (multiple Google accounts can be logged in on the device).  It should be used if signIn rejects with NO_SAVED_CREDENTIAL_FOUND error, as shown in the code snippet above. You don't need to call createAccount as a response to a user action - you can call it when your app starts or when suitable.  Returns a Promise that resolves with an object containing the user data or rejects in case of error. On the web, this call rejects - please read below for web support.  UI screenshot  await GoogleOneTapSignIn.createAccount({ webClientId: config.webClientId, nonce: 'your_nonce', });   ","version":null,"tagName":"h3"},{"title":"presentExplicitSignIn​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#presentexplicitsignin","content":" ✨since v14.2.0  signature: (params: OneTapSignInParams) =&gt; Promise&lt;OneTapUser&gt;  Presents the sign in dialog explicitly. This is useful when the user has hit rate limiting (ONE_TAP_START_FAILED) and the one-tap flow is thus not available, or if both signIn and createAccount reject with NO_SAVED_CREDENTIAL_FOUND error - which happens (in the unlikely case) when no Google account is present on the device. This will prompt the user to add a Google account.  Call this method only as a reaction to when user taps a &quot;sign in with Google&quot; button.  On the web, this call rejects - please use the Sign in button instead. Read below for web support.  UI screenshot  await GoogleOneTapSignIn.presentExplicitSignIn({ webClientId: config.webClientId, nonce: 'your_nonce', });   ","version":null,"tagName":"h3"},{"title":"signOut​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#signout","content":" signature: (emailOrUniqueId: string) =&gt; Promise&lt;null&gt;  Signs out the current user. On the web, you need to provide the id or email of the user. On Android and iOS, this parameter does not have any effect.  Returns a Promise that resolves with null or rejects in case of error.  await GoogleOneTapSignIn.signOut(user.id);   ","version":null,"tagName":"h3"},{"title":"Web support​","type":1,"pageTitle":"One-tap Google sign in","url":"/docs/one-tap#web-support","content":" Providing a unified API for the web is a bit more complex than it may seem. This is because the web experience is quite different from the mobile one, and so are the underlying apis.  The WebGoogleOneTapSignIn.signIn function exists to handle the web-specific logic. Its interface is as close as possible to the native one, allowing to reuse the logic for both success and error handling across all platforms.  To implement web support, follow these steps:  Call WebGoogleOneTapSignIn.signIn upon page load. This will attempt to present the One-tap UI. It also sets up a listener for authentication events and calls the onSuccess callback when the user signs in (either with One-tap flow or the Sign-In button).  warning You should display the One Tap UI on page load or other window events, instead of it being displayed by a user action (e.g. a button press). Otherwise, you may get a broken UX. Users may not see any UI after a user action, due to globally opt-out, cool-down, or no Google session.  useEffect(() =&gt; { if (Platform.OS === 'web') { WebGoogleOneTapSignIn.signIn( { webClientId: config.webClientId, }, { onError: (error: NativeModuleError) =&gt; { // this might be cancellation, one-tap rate limiting, or other errors }, onSuccess: (userInfo: OneTapUser) =&gt; { // user has signed in, do something with the user info }, momentListener: (moment) =&gt; { // optional }, }, ); } }, []);   Optionally, you can provide a momentListener callback function. The callback is called when important events take place. See reference.  Render the WebGoogleSigninButton component  One-tap UI may not always be available: This happens if user has opted out or when they cancel the dialog several times in a row, entering the cooldown period.  WebGoogleSigninButton serves as a fallback. Tapping it will open the regular Google Sign-In dialog. When user signs in, the onSuccess callback will be called.  info The reason the WebGoogleOneTapSignIn.signIn api is callback-based rather than promise-based is that it's possible to get into an &quot;error&quot; state (when one-tap is not available) and later get a successful sign in from the button flow. Because of how the Google Sign In for Web SDK is done, modeling this with a promise-based api is not possible. ","version":null,"tagName":"h2"},{"title":"signIn​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#signin","content":" signature: (options: SignInParams) =&gt; Promise&lt;User&gt;  Prompts a modal to let the user sign in into your application. Resolved promise returns an userInfo object. Rejects with error otherwise.  // import statusCodes along with GoogleSignin import { GoogleSignin, statusCodes, } from '@react-native-google-signin/google-signin'; // Somewhere in your code _signIn = async () =&gt; { try { await GoogleSignin.hasPlayServices(); const userInfo = await GoogleSignin.signIn(); setState({ userInfo, error: undefined }); } catch (error) { if (isErrorWithCode(error)) { switch (error.code) { case statusCodes.SIGN_IN_CANCELLED: // user cancelled the login flow break; case statusCodes.IN_PROGRESS: // operation (eg. sign in) already in progress break; case statusCodes.PLAY_SERVICES_NOT_AVAILABLE: // play services not available or outdated break; default: // some other error happened } } else { // an error that's not related to google sign in occurred } } };   ","version":null,"tagName":"h3"},{"title":"addScopes​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#addscopes","content":" signature: (options: AddScopesParams) =&gt; Promise&lt;User | null&gt;  This method resolves with user object or with null if no user is currently logged in.  You may not need this call: you can supply required scopes to the configure call. However, if you want to gain access to more scopes later, use this call.  Example:  const user = await GoogleSignin.addScopes({ scopes: ['https://www.googleapis.com/auth/user.gender.read'], });   ","version":null,"tagName":"h3"},{"title":"signInSilently​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#signinsilently","content":" signature: () =&gt; Promise&lt;User&gt;  May be called e.g. after of your main component mounts. This method returns a Promise that resolves with the current user and rejects with an error otherwise.  To see how to handle errors read signIn() method  const getCurrentUserInfo = async () =&gt; { try { const userInfo = await GoogleSignin.signInSilently(); setState({ userInfo }); } catch (error) { if (error.code === statusCodes.SIGN_IN_REQUIRED) { // user has not signed in yet } else { // some other error } } };   ","version":null,"tagName":"h3"},{"title":"hasPreviousSignIn​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#hasprevioussignin","content":" signature: () =&gt; boolean  This synchronous method may be used to find out whether some user previously signed in.  Note that hasPreviousSignIn() can return true but getCurrentUser() can return null, in which case you can call signInSilently() to recover the user. However, it may happen that calling signInSilently() rejects with an error (e.g. due to a network issue).  const hasPreviousSignIn = async () =&gt; { const hasPreviousSignIn = GoogleSignin.hasPreviousSignIn(); setState({ hasPreviousSignIn }); };   ","version":null,"tagName":"h3"},{"title":"getCurrentUser​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#getcurrentuser","content":" signature: () =&gt; User | null  This is a synchronous method that returns null or userInfo object of the currently signed-in user.  const getCurrentUser = async () =&gt; { const currentUser = GoogleSignin.getCurrentUser(); setState({ currentUser }); };   ","version":null,"tagName":"h3"},{"title":"clearCachedAccessToken​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#clearcachedaccesstoken","content":" signature: (accessTokenString: string) =&gt; Promise&lt;null&gt;  This method only has an effect on Android. You may run into a 401 Unauthorized error when a token is invalid. Call this method to remove the token from local cache and then call getTokens() to get fresh tokens. Calling this method on iOS does nothing and always resolves. This is because on iOS, getTokens() always returns valid tokens, refreshing them first if they have expired or are about to expire (see docs).  ","version":null,"tagName":"h3"},{"title":"getTokens​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#gettokens","content":" signature: () =&gt; Promise&lt;GetTokensResponse&gt;  Resolves with an object containing { idToken: string, accessToken: string, } or rejects with an error. Note that using accessToken for identity assertion on your backend server is discouraged.  ","version":null,"tagName":"h3"},{"title":"signOut​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#signout","content":" signature: () =&gt; Promise&lt;null&gt;  Signs out the current user.  const signOut = async () =&gt; { try { await GoogleSignin.signOut(); setState({ user: null }); // Remember to remove the user from your app's state as well } catch (error) { console.error(error); } };   ","version":null,"tagName":"h3"},{"title":"revokeAccess​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#revokeaccess","content":" signature: () =&gt; Promise&lt;null&gt;  Removes your application from the user authorized applications. Read more about it here and here.  const revokeAccess = async () =&gt; { try { await GoogleSignin.revokeAccess(); // Google Account disconnected from your app. // Perform clean-up actions, such as deleting data associated with the disconnected account. } catch (error) { console.error(error); } };   ","version":null,"tagName":"h3"},{"title":"hasPlayServices​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#hasplayservices","content":" signature: (options: HasPlayServicesParams) =&gt; Promise&lt;boolean&gt;  Checks if device has Google Play Services installed. Always resolves to true on iOS.  Presence of up-to-date Google Play Services is required to show the sign in modal, but it is not required to perform calls to configure and signInSilently. Therefore, we recommend to call hasPlayServices directly before signIn.  try { await GoogleSignin.hasPlayServices({ showPlayServicesUpdateDialog: true }); // google services are available } catch (err) { console.error('play services are not available'); }   hasPlayServices accepts one parameter, an object which contains a single key: showPlayServicesUpdateDialog (defaults to true). When showPlayServicesUpdateDialog is set to true the library will prompt the user to take action to solve the issue, as seen in the figure below.  You may also use this call at any time to find out if Google Play Services are available and react to the result as necessary.    ","version":null,"tagName":"h3"},{"title":"Notes​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#notes","content":" Calling the methods exposed by this package may involve remote network calls and you should thus take into account that such calls may take a long time to complete (e.g. in case of poor network connection).  idToken Note: idToken is not null only if you specify a valid webClientId. webClientId corresponds to your server clientID on the developers console. It HAS TO BE of type WEB  Read iOS documentation and Android documentation for more information  serverAuthCode Note: serverAuthCode is not null only if you specify a valid webClientId and set offlineAccess to true. Once you get the auth code, you can send it to your backend server and exchange the code for an access token. Only with this freshly acquired token can you access user data.  Read iOS documentation and Android documentation for more information.  ","version":null,"tagName":"h2"},{"title":"Additional scopes​","type":1,"pageTitle":"Original Google sign in","url":"/docs/original#additional-scopes","content":" The default requested scopes are email and profile.  If you want to manage other data from your application (for example access user agenda or upload a file to drive) you need to request additional permissions. This can be accomplished by adding the necessary scopes when configuring the GoogleSignin instance.  Please visit https://developers.google.com/identity/protocols/googlescopes or https://developers.google.com/oauthplayground/ for a list of available scopes. ","version":null,"tagName":"h2"},{"title":"Expo setup","type":0,"sectionRef":"#","url":"/docs/setting-up/expo","content":"","keywords":"","version":null},{"title":"Prepare your Expo project​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#prepare-your-expo-project","content":" warning This package cannot be used in the &quot;Expo Go&quot; app because it requires custom native code. However, you can add custom native code to expo by following the guide below. Read Expo's &quot;Adding custom native code&quot; guide for detailed information.  info With Expo SDK 50, minimum iOS version was bumped to 13.4. If unsure, please consult release notes to determine the right version of this package to install.  npx expo install @react-native-google-signin/google-signin   After installing this npm package, add the provided config plugin to the plugins array of your app.json or app.config.js.  Expo without Firebase​  If you're not using Firebase, provide the iosUrlScheme option to the config plugin.  To obtain iosUrlScheme, go to the Google Cloud Console and copy the &quot;iOS URL scheme&quot; from your iOS client in the &quot;OAuth 2.0 Client IDs&quot; section. Note that the config plugin that works without Firebase is only available to sponsors of this module.  app.json { &quot;expo&quot;: { &quot;plugins&quot;: [ [ &quot;@react-native-google-signin/google-signin&quot;, { &quot;iosUrlScheme&quot;: &quot;com.googleusercontent.apps._some_id_here_&quot; } ] ] } }   Expo and Firebase​  With Firebase, obtain the config file and place it into your project. Then specify the path to the file:  app.json { &quot;expo&quot;: { &quot;plugins&quot;: [&quot;@react-native-google-signin/google-signin&quot;], &quot;android&quot;: { &quot;googleServicesFile&quot;: &quot;./google-services.json&quot; }, &quot;ios&quot;: { &quot;googleServicesFile&quot;: &quot;./GoogleService-Info.plist&quot; } } }   ","version":null,"tagName":"h3"},{"title":"Ensure compatibility​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#ensure-compatibility","content":" If you're using the sponsor package:  If you're using Expo SDK &gt;= 50, you're good to go.  But if you're using Expo 49 or older, you need to either:  install version 12.1.0 of the packageor install version &gt;= 13 AND specify compileSdkVersion 34 of your project using Expo BuildProperties  ","version":null,"tagName":"h3"},{"title":"Rebuilding the app​","type":1,"pageTitle":"Expo setup","url":"/docs/setting-up/expo#rebuilding-the-app","content":" Then run the following to generate the native project directories.  npx expo prebuild --clean   Next, rebuild your app and you're good to go!  npx expo run:android &amp;&amp; npx expo run:ios  ","version":null,"tagName":"h3"},{"title":"iOS setup guide","type":0,"sectionRef":"#","url":"/docs/setting-up/ios","content":"","keywords":"","version":null},{"title":"1. Link the native module​","type":1,"pageTitle":"iOS setup guide","url":"/docs/setting-up/ios#1-link-the-native-module","content":" run pod install in ios/ directory to install the module  ","version":null,"tagName":"h3"},{"title":"2. Google project configuration​","type":1,"pageTitle":"iOS setup guide","url":"/docs/setting-up/ios#2-google-project-configuration","content":" Follow this guide to get the configuration information which you need for step 3.  ","version":null,"tagName":"h3"},{"title":"3. Xcode configuration​","type":1,"pageTitle":"iOS setup guide","url":"/docs/setting-up/ios#3-xcode-configuration","content":" Configure URL types in the Info panel (see screenshot) add a URL with scheme set to your REVERSED_CLIENT_ID (found inside GoogleService-Info.plist or Google Cloud console) If you need to support Mac Catalyst, you will need to enable the Keychain Sharing capability on each build target. No keychain groups need to be added.    ","version":null,"tagName":"h3"},{"title":"Optional: modify your app to respond to the URL scheme​","type":1,"pageTitle":"iOS setup guide","url":"/docs/setting-up/ios#optional-modify-your-app-to-respond-to-the-url-scheme","content":" This is only required if you have multiple listeners for openURL - for instance if you have both Google and Facebook OAuth (as seen in the code snippet below).  Because only one openURL method can be defined, if you have multiple listeners for openURL, you must combine them into a single function in your AppDelegate.m like so:  Open AppDelegate.mAdd an import: #import &lt;GoogleSignIn/GoogleSignIn.h&gt;Add a method to respond to the URL scheme. This is just an example of a method that you can add at the bottom of your file if you're using both FBSDKApplicationDelegate and GIDSignIn :  // AppDelegate.m - (BOOL)application:(UIApplication *)application openURL:(nonnull NSURL *)url options:(nonnull NSDictionary&lt;NSString *,id&gt; *)options { return [[FBSDKApplicationDelegate sharedInstance] application:application openURL:url options:options] || [GIDSignIn.sharedInstance handleURL:url]; }  ","version":null,"tagName":"h3"},{"title":"Web setup guide","type":0,"sectionRef":"#","url":"/docs/setting-up/web","content":"Web setup guide On the web, there is one extra step necessary to use the library: to load the Google Client Library and make it available in the browser before calling any of the APIs exposed by this package. tip Web support is only available to sponsors️. It takes just a few clicks to get access ❤️. There are different ways to load the client script. Some of them are: Next.jsSimple htmluseEffect import Script from 'next/script'; &lt;Script src=&quot;https://accounts.google.com/gsi/client&quot; strategy=&quot;lazyOnload&quot; onLoad={() =&gt; { // present the one-tap popup }} /&gt;; After the script is loaded, you can call the functions for signing in and render the WebGoogleSigninButton. If you call any of the One-tap functions before the client library is loaded, such calls will reject with the PLAY_SERVICES_NOT_AVAILABLE error code. You can read the official docs for loading the Client Library here.","keywords":"","version":null},{"title":"FAQ / Troubleshooting","type":0,"sectionRef":"#","url":"/docs/troubleshooting","content":"","keywords":"","version":null},{"title":"Android​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#android","content":" See troubleshooting for non-firebase users below  ","version":null,"tagName":"h2"},{"title":"\"A non-recoverable sign in failure occurred\"​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#a-non-recoverable-sign-in-failure-occurred","content":" See this comment. Or this SO question.  ","version":null,"tagName":"h3"},{"title":"Login does not work when downloading from the Play Store.​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#login-does-not-work-when-downloading-from-the-play-store","content":" Check if &quot;Google Play App Signing&quot; is enabled for your app. If it is enabled, you will need to add the &quot;App signing certificate&quot; SHA-1 to your firebase console.  You can find it at: App -&gt; Release (in left sidebar) -&gt; Setup -&gt; App integrity. Under the App signing key certificate, copy SHA-1 certificate fingerprint into firebase console for the Android app.  If you are not using firebase, and your app is enabled for &quot;Google Play App Signing&quot;: Go to &quot;https://console.developers.google.com/&quot; -&gt; click &quot;Credential&quot; in the right panel -&gt; Find &quot;Client ID&quot; for type &quot;Android&quot; under &quot;OAuth 2.0 Client IDs&quot; section -&gt; Edit -&gt; replace &quot;SHA-1 certificate fingerprint&quot; with the one from App -&gt; Release (in left sidebar) -&gt; Setup -&gt; App integrity -&gt; App signing key certificate.  ","version":null,"tagName":"h3"},{"title":"DEVELOPER_ERROR or code: 10 or Developer console is not set up correctly error message​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#developer_error-or-code-10-or-developer-console-is-not-set-up-correctly-error-message","content":" This is always a configuration mismatch. Make sure that your SHA certificate fingerprint and package name you entered in Firebase are correct. If you are in development, make sure your development signing fingerprint is added as well.  To get the SHA1:  From your project root, cd android &amp;&amp; ./gradlew signingReport.Scroll to the top of output, see the fingerprints. Debug fingerprint is used in dev, release fingerprint is used in production.  To add the SHA1:  Sign in to Firebase and open your project.Click the Settings icon and select Project settings.In the &quot;Your apps&quot; card, select the package name of the app you need to add SHA1 to.Click &quot;Add fingerprint&quot;.    Then re-download the google-services.json file, put it into your project (usually, the path is android/app/google-services.json) and rebuild your project.  You may need to add your SHA certificate fingerprint to your Firebase config. Find your SHA1 fingerprint by following the instructions at stackoverflow. Then, go to https://console.firebase.google.com/, select your app, and add the SHA1 value under Project Settings (gear icon in the upper left) -&gt; Your Apps -&gt; SHA certificate fingerprints  If you're passing webClientId in configuration object to GoogleSignin.configure() make sure it's correct and that it is of type web (NOT Android!). You can get your webClientId from Google Developer Console. They're listed under &quot;OAuth 2.0 client IDs&quot;.  If you're running your app in debug mode and not using webClientId or you're sure it's correct the problem might be signature (SHA-1 or SHA-256) mismatch. You need to add the following to android/app/build.gradle:  signingConfigs { + debug { + storeFile file(MYAPP_RELEASE_STORE_FILE) + storePassword MYAPP_RELEASE_STORE_PASSWORD + keyAlias MYAPP_RELEASE_KEY_ALIAS + keyPassword MYAPP_RELEASE_KEY_PASSWORD + } release { ... } }   ","version":null,"tagName":"h3"},{"title":"Login does not work when using Internal App Sharing.​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#login-does-not-work-when-using-internal-app-sharing","content":" If you get a DEVELOPER_ERROR when using Internal App Sharing, it is because Google resigns your application with its own key. In the Google Play Console go to Development Tools-&gt; Internal App Sharing-&gt;App Certificate and there is another SHA-1 fingerprint to add to firebase.  This is separate from the release app signing certificate explained below.  Also see here.  ","version":null,"tagName":"h3"},{"title":"Changing Google Play Services version​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#changing-google-play-services-version","content":" See &quot;Choose Dependency versions&quot; above.  ","version":null,"tagName":"h3"},{"title":"Missing api_key/current_key object​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#missing-api_keycurrent_key-object","content":" open android/app/google-services.json and replace &quot;api_key&quot;:[] with &quot;api_key&quot;:[{ &quot;current_key&quot;: &quot;&quot; }]  ","version":null,"tagName":"h3"},{"title":"Error code 12501​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#error-code-12501","content":" This is a permission error. Make sure the certificate_hash in android/app/google-services.json matches your certificate.  To get your sha1-hash  keytool -exportcert -keystore ~/.android/debug.keystore -list -v   Also make sure the application id matches the one you enter on the cloud console.  ","version":null,"tagName":"h3"},{"title":"Troubleshooting for non-firebase users​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#troubleshooting-for-non-firebase-users","content":" If you are not using firebase you can ignore all docs related to google services. You don't need a google-services.json or any build.gradle changes from these docs. Simply follow the instructions from the official docs. However, be aware of following common issues which can lead to a DEVELOPER ERROR or an A non-recoverable sign in failure occurred error.  Try different SHA1 keys​  Depending on your config you may need to add multiple SHA1 keys. Go to your android folder and run ./gradlew signingReport. You should see different SHA1 keys for debug and release. Add them to the google developer console under the oauth section. Select Android as client type. You may also need your SHA1 key from the play console. Find it in the app signature area and add it as well.  Package name !== application id​  When adding a new oauth client, google asks you to add your package name. In some cases your package name is not equal to your application id. Check if your package name in the AndroidManifest.xml is the same as your application/bundle id. Find your application id in the play console or android/app/build.gradle. The format looks like com.yourapp.id.  ","version":null,"tagName":"h3"},{"title":"iOS​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#ios","content":" ","version":null,"tagName":"h2"},{"title":"On iOS the app crashes when tapping Sign In button​","type":1,"pageTitle":"FAQ / Troubleshooting","url":"/docs/troubleshooting#on-ios-the-app-crashes-when-tapping-sign-in-button","content":" Along with &quot;Your app is missing support for the following URL schemes&quot; error in console.  You're missing Url Schemes configuration. How to do it:  ","version":null,"tagName":"h3"}],"options":{"disableVersioning":true,"excludeRoutes":["/docs/license"],"id":"default"}}